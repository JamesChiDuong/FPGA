// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2023 10:28:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Top_Module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Top_Module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_sel;
reg clk;
reg reset;
reg [3:0] sw_data_1;
reg [3:0] sw_data_2;
// wires                                               
wire [6:0] LED_OUT1;
wire [6:0] LED_OUT2;
wire [6:0] LED_OUT3;

// assign statements (if any)                          
Top_Module i1 (
// port map - connection between master ports and signals/registers   
	.LED_OUT1(LED_OUT1),
	.LED_OUT2(LED_OUT2),
	.LED_OUT3(LED_OUT3),
	.btn_sel(btn_sel),
	.clk(clk),
	.reset(reset),
	.sw_data_1(sw_data_1),
	.sw_data_2(sw_data_2)
);
initial 
begin 
#1000000 $finish;
end 

// btn_sel
always
begin
	btn_sel = 1'b0;
	btn_sel = #10000 1'b1;
	#10000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// sw_data_1[ 3 ]
initial
begin
	repeat(2)
	begin
		sw_data_1[3] = 1'b0;
		sw_data_1[3] = #240000 1'b1;
		# 240000;
	end
	sw_data_1[3] = 1'b0;
end 
// sw_data_1[ 2 ]
initial
begin
	repeat(4)
	begin
		sw_data_1[2] = 1'b0;
		sw_data_1[2] = #120000 1'b1;
		# 120000;
	end
	sw_data_1[2] = 1'b0;
end 
// sw_data_1[ 1 ]
initial
begin
	repeat(8)
	begin
		sw_data_1[1] = 1'b0;
		sw_data_1[1] = #60000 1'b1;
		# 60000;
	end
	sw_data_1[1] = 1'b0;
end 
// sw_data_1[ 0 ]
initial
begin
	repeat(16)
	begin
		sw_data_1[0] = 1'b0;
		sw_data_1[0] = #30000 1'b1;
		# 30000;
	end
	sw_data_1[0] = 1'b0;
	sw_data_1[0] = #30000 1'b1;
end 
// sw_data_2[ 3 ]
initial
begin
	repeat(2)
	begin
		sw_data_2[3] = 1'b0;
		sw_data_2[3] = #240000 1'b1;
		# 240000;
	end
	sw_data_2[3] = 1'b0;
end 
// sw_data_2[ 2 ]
initial
begin
	repeat(4)
	begin
		sw_data_2[2] = 1'b0;
		sw_data_2[2] = #120000 1'b1;
		# 120000;
	end
	sw_data_2[2] = 1'b0;
end 
// sw_data_2[ 1 ]
initial
begin
	repeat(8)
	begin
		sw_data_2[1] = 1'b0;
		sw_data_2[1] = #60000 1'b1;
		# 60000;
	end
	sw_data_2[1] = 1'b0;
end 
// sw_data_2[ 0 ]
initial
begin
	repeat(16)
	begin
		sw_data_2[0] = 1'b0;
		sw_data_2[0] = #30000 1'b1;
		# 30000;
	end
	sw_data_2[0] = 1'b0;
	sw_data_2[0] = #30000 1'b1;
end 
endmodule

