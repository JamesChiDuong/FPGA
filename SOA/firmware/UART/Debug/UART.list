
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c40  08005c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  08005cb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005cb8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de45  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3a  00000000  00000000  0002dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000308c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025aab  00000000  00000000  00031298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1b7  00000000  00000000  00056d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaeb8  00000000  00000000  00063efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014edb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c0  00000000  00000000  0014ee04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a94 	.word	0x08005a94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005a94 	.word	0x08005a94

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <HAL_UART_RxCpltCallback+0x50>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d119      	bne.n	800061a <HAL_UART_RxCpltCallback+0x46>
	{
		Rx_Buffer[count++] = Rx_data[0];
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x54>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	b2d1      	uxtb	r1, r2
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_UART_RxCpltCallback+0x54>)
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_UART_RxCpltCallback+0x58>)
 80005f6:	7819      	ldrb	r1, [r3, #0]
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <HAL_UART_RxCpltCallback+0x5c>)
 80005fa:	5499      	strb	r1, [r3, r2]
		if((Rx_data[0]) == '\r')
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_UART_RxCpltCallback+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	d105      	bne.n	8000610 <HAL_UART_RxCpltCallback+0x3c>
		{
			count = 0;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_UART_RxCpltCallback+0x54>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
			CheckFlagUSART = 1;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_UART_RxCpltCallback+0x60>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)Rx_data,1);
 8000610:	2201      	movs	r2, #1
 8000612:	4906      	ldr	r1, [pc, #24]	; (800062c <HAL_UART_RxCpltCallback+0x58>)
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <HAL_UART_RxCpltCallback+0x64>)
 8000616:	f002 f853 	bl	80026c0 <HAL_UART_Receive_IT>
	}
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40013800 	.word	0x40013800
 8000628:	20000246 	.word	0x20000246
 800062c:	20000244 	.word	0x20000244
 8000630:	20000248 	.word	0x20000248
 8000634:	2000027a 	.word	0x2000027a
 8000638:	2000008c 	.word	0x2000008c

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fb5e 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f861 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f937 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064e:	f000 f8e9 	bl	8000824 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000652:	f000 f89b 	bl	800078c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart2);
 8000656:	4825      	ldr	r0, [pc, #148]	; (80006ec <main+0xb0>)
 8000658:	f001 ff4c 	bl	80024f4 <HAL_UART_Init>
 // HAL_UART_Init(&huart1);
  HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	4924      	ldr	r1, [pc, #144]	; (80006f0 <main+0xb4>)
 8000660:	4824      	ldr	r0, [pc, #144]	; (80006f4 <main+0xb8>)
 8000662:	f002 f82d 	bl	80026c0 <HAL_UART_Receive_IT>
  int lastTime = HAL_GetTick();
 8000666:	f000 fbb1 	bl	8000dcc <HAL_GetTick>
 800066a:	4603      	mov	r3, r0
 800066c:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int currentTime = HAL_GetTick();
 800066e:	f000 fbad 	bl	8000dcc <HAL_GetTick>
 8000672:	4603      	mov	r3, r0
 8000674:	60bb      	str	r3, [r7, #8]
	  if(currentTime - lastTime >= 2000)
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000680:	db21      	blt.n	80006c6 <main+0x8a>
	  {
		  int data = (rand()%100 + 1);
 8000682:	f003 ffdf 	bl	8004644 <rand>
 8000686:	4602      	mov	r2, r0
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <main+0xbc>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1159      	asrs	r1, r3, #5
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1acb      	subs	r3, r1, r3
 8000694:	2164      	movs	r1, #100	; 0x64
 8000696:	fb01 f303 	mul.w	r3, r1, r3
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	3301      	adds	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
		  snprintf(Tx_Buffer,sizeof(Tx_Buffer),"%d\n",data);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <main+0xc0>)
 80006a4:	2196      	movs	r1, #150	; 0x96
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0xc4>)
 80006a8:	f004 f80a 	bl	80046c0 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <main+0xc4>)
 80006ae:	f7ff fdb7 	bl	8000220 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	4911      	ldr	r1, [pc, #68]	; (8000700 <main+0xc4>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0xb0>)
 80006be:	f001 ff69 	bl	8002594 <HAL_UART_Transmit>
		  lastTime = currentTime;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	60fb      	str	r3, [r7, #12]
	  }
	  if(CheckFlagUSART)
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <main+0xc8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0cf      	beq.n	800066e <main+0x32>
	  {
		  CheckFlagUSART = 0;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <main+0xc8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*)Rx_Buffer,strlen(Rx_Buffer),1000);
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <main+0xcc>)
 80006d6:	f7ff fda3 	bl	8000220 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <main+0xcc>)
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <main+0xb8>)
 80006e6:	f001 ff55 	bl	8002594 <HAL_UART_Transmit>
  {
 80006ea:	e7c0      	b.n	800066e <main+0x32>
 80006ec:	2000011c 	.word	0x2000011c
 80006f0:	20000244 	.word	0x20000244
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	51eb851f 	.word	0x51eb851f
 80006fc:	08005aac 	.word	0x08005aac
 8000700:	200001ac 	.word	0x200001ac
 8000704:	2000027a 	.word	0x2000027a
 8000708:	20000248 	.word	0x20000248

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2238      	movs	r2, #56	; 0x38
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 ff8a 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f000 fea9 	bl	8001488 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	4618      	mov	r0, r3
 800074e:	f000 ff4f 	bl	80015f0 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000758:	f000 f8d4 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	2301      	movs	r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fa53 	bl	8001c20 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000780:	f000 f8c0 	bl	8000904 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_USART1_UART_Init+0x90>)
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_USART1_UART_Init+0x94>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_USART1_UART_Init+0x90>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007d6:	f001 fe8d 	bl	80024f4 <HAL_UART_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e0:	f000 f890 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007e8:	f003 fe2f 	bl	800444a <HAL_UARTEx_SetTxFifoThreshold>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 f887 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x90>)
 80007fa:	f003 fe64 	bl	80044c6 <HAL_UARTEx_SetRxFifoThreshold>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 f87e 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_USART1_UART_Init+0x90>)
 800080a:	f003 fde5 	bl	80043d8 <HAL_UARTEx_DisableFifoMode>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000814:	f000 f876 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000008c 	.word	0x2000008c
 8000820:	40013800 	.word	0x40013800

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <MX_USART2_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 800086e:	f001 fe41 	bl	80024f4 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f844 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000880:	f003 fde3 	bl	800444a <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f83b 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 8000892:	f003 fe18 	bl	80044c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f832 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_USART2_UART_Init+0x90>)
 80008a2:	f003 fd99 	bl	80043d8 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f82a 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000011c 	.word	0x2000011c
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_GPIO_Init+0x44>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <MX_GPIO_Init+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_GPIO_Init+0x44>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_GPIO_Init+0x44>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <MX_GPIO_Init+0x44>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_GPIO_Init+0x44>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x44>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	; 0x60
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_MspInit+0x44>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x44>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x44>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	; 0x58
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x44>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000946:	f000 fe43 	bl	80015d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0a0      	sub	sp, #128	; 0x80
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	2254      	movs	r2, #84	; 0x54
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fe5b 	bl	8004634 <memset>
  if(huart->Instance==USART1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <HAL_UART_MspInit+0x130>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d13e      	bne.n	8000a06 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fb5f 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a0:	f7ff ffb0 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a8:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6613      	str	r3, [r2, #96]	; 0x60
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_UART_MspInit+0x134>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009d4:	2330      	movs	r3, #48	; 0x30
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e4:	2307      	movs	r3, #7
 80009e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009ec:	4619      	mov	r1, r3
 80009ee:	4828      	ldr	r0, [pc, #160]	; (8000a90 <HAL_UART_MspInit+0x138>)
 80009f0:	f000 fbc8 	bl	8001184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2025      	movs	r0, #37	; 0x25
 80009fa:	f000 face 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009fe:	2025      	movs	r0, #37	; 0x25
 8000a00:	f000 fae5 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a04:	e03b      	b.n	8000a7e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <HAL_UART_MspInit+0x13c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d136      	bne.n	8000a7e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fb1b 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000a28:	f7ff ff6c 	bl	8000904 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a36:	6593      	str	r3, [r2, #88]	; 0x58
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0x134>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fb83 	bl	8001184 <HAL_GPIO_Init>
}
 8000a7e:	bf00      	nop
 8000a80:	3780      	adds	r7, #128	; 0x80
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40013800 	.word	0x40013800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	40004400 	.word	0x40004400

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f960 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <USART1_IRQHandler+0x10>)
 8000af2:	f001 fe3b 	bl	800276c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000008c 	.word	0x2000008c

08000b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	return 1;
 8000b04:	2301      	movs	r3, #1
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_kill>:

int _kill(int pid, int sig)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b1a:	f003 fd61 	bl	80045e0 <__errno>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2216      	movs	r2, #22
 8000b22:	601a      	str	r2, [r3, #0]
	return -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_exit>:

void _exit (int status)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffe7 	bl	8000b10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b42:	e7fe      	b.n	8000b42 <_exit+0x12>

08000b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f003 fcc6 	bl	80045e0 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	2000027c 	.word	0x2000027c
 8000c88:	20000298 	.word	0x20000298

08000c8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f003 fc85 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fcab 	bl	800063c <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cf4:	08005c48 	.word	0x08005c48
  ldr r2, =_sbss
 8000cf8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cfc:	20000294 	.word	0x20000294

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>

08000d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f939 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f80e 	bl	8000d34 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d24:	f7ff fdf4 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	79fb      	ldrb	r3, [r7, #7]

}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_InitTick+0x68>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d022      	beq.n	8000d8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_InitTick+0x68>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f944 	bl	8000fea <HAL_SYSTICK_Config>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d809      	bhi.n	8000d82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	f04f 30ff 	mov.w	r0, #4294967295
 8000d76:	f000 f910 	bl	8000f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_InitTick+0x70>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e004      	b.n	8000d92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x20>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000280 	.word	0x20000280
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000280 	.word	0x20000280

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff40 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff90 	bl	8000ed8 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5f 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff33 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa4 	bl	8000f40 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d005      	beq.n	8001026 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e037      	b.n	8001096 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001044:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 021f 	and.w	r2, r3, #31
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001072:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001094:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d00d      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e047      	b.n	8001178 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2101      	movs	r1, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001134:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00c      	beq.n	8001158 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800114c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001156:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	4798      	blx	r3
    }
  }
  return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001192:	e15a      	b.n	800144a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 814c 	beq.w	8001444 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	6939      	ldr	r1, [r7, #16]
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 80a6 	beq.w	8001444 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	4a5a      	ldr	r2, [pc, #360]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6613      	str	r3, [r2, #96]	; 0x60
 8001304:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x2e4>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001310:	4a56      	ldr	r2, [pc, #344]	; (800146c <HAL_GPIO_Init+0x2e8>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133a:	d01f      	beq.n	800137c <HAL_GPIO_Init+0x1f8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x2ec>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d019      	beq.n	8001378 <HAL_GPIO_Init+0x1f4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x2f0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d013      	beq.n	8001374 <HAL_GPIO_Init+0x1f0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <HAL_GPIO_Init+0x2f4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00d      	beq.n	8001370 <HAL_GPIO_Init+0x1ec>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x2f8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d007      	beq.n	800136c <HAL_GPIO_Init+0x1e8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2fc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_GPIO_Init+0x1e4>
 8001364:	2305      	movs	r3, #5
 8001366:	e00a      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 8001368:	2306      	movs	r3, #6
 800136a:	e008      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 800136c:	2304      	movs	r3, #4
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 8001370:	2303      	movs	r3, #3
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1fa>
 800137c:	2300      	movs	r3, #0
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138e:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_GPIO_Init+0x2e8>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_GPIO_Init+0x300>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c0:	4a30      	ldr	r2, [pc, #192]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x300>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_GPIO_Init+0x300>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x300>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_GPIO_Init+0x300>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f ae9d 	bne.w	8001194 <HAL_GPIO_Init+0x10>
  }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	48000400 	.word	0x48000400
 8001474:	48000800 	.word	0x48000800
 8001478:	48000c00 	.word	0x48000c00
 800147c:	48001000 	.word	0x48001000
 8001480:	48001400 	.word	0x48001400
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d141      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d131      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a4:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014aa:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014bc:	4a41      	ldr	r2, [pc, #260]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c4:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2232      	movs	r2, #50	; 0x32
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014da:	e002      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3b01      	subs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d102      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f2      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d158      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e057      	b.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001518:	e04d      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d141      	bne.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d131      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2232      	movs	r2, #50	; 0x32
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001566:	e002      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3b01      	subs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d102      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f2      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d112      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e011      	b.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015a4:	e007      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40007000 	.word	0x40007000
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015de:	6093      	str	r3, [r2, #8]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40007000 	.word	0x40007000

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e306      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	4b97      	ldr	r3, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x3e>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b08      	cmp	r3, #8
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b8d      	ldr	r3, [pc, #564]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e2e1      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b85      	ldr	r3, [pc, #532]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a84      	ldr	r2, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b7f      	ldr	r3, [pc, #508]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7e      	ldr	r2, [pc, #504]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7b      	ldr	r2, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b78      	ldr	r3, [pc, #480]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b75      	ldr	r3, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a74      	ldr	r2, [pc, #464]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb90 	bl	8000dcc <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fb8c 	bl	8000dcc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e2a6      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c2:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb7c 	bl	8000dcc <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb78 	bl	8000dcc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e292      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ea:	4b60      	ldr	r3, [pc, #384]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d075      	beq.n	80017f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001706:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d102      	bne.n	8001726 <HAL_RCC_OscConfig+0x136>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d002      	beq.n	800172c <HAL_RCC_OscConfig+0x13c>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d11f      	bne.n	800176c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	4b4f      	ldr	r3, [pc, #316]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x154>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e265      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b49      	ldr	r3, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	4946      	ldr	r1, [pc, #280]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fae9 	bl	8000d34 <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d043      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e251      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fb24 	bl	8000dcc <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fb20 	bl	8000dcc <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e23a      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	492d      	ldr	r1, [pc, #180]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
 80017ba:	e01a      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb00 	bl	8000dcc <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fafc 	bl	8000dcc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e216      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1e0>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d041      	beq.n	8001882 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01c      	beq.n	8001840 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fad9 	bl	8000dcc <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fad5 	bl	8000dcc <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1ef      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0ef      	beq.n	800181e <HAL_RCC_OscConfig+0x22e>
 800183e:	e020      	b.n	8001882 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_OscConfig+0x27c>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fabc 	bl	8000dcc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001856:	e00d      	b.n	8001874 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fab8 	bl	8000dcc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d906      	bls.n	8001874 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1d2      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ea      	bne.n	8001858 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80a6 	beq.w	80019dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2b4>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00d      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a7e      	ldr	r2, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	4b79      	ldr	r3, [pc, #484]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d2:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a75      	ldr	r2, [pc, #468]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff fa75 	bl	8000dcc <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff fa71 	bl	8000dcc <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e18b      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d108      	bne.n	800191e <HAL_RCC_OscConfig+0x32e>
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191c:	e024      	b.n	8001968 <HAL_RCC_OscConfig+0x378>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d110      	bne.n	8001948 <HAL_RCC_OscConfig+0x358>
 8001926:	4b60      	ldr	r3, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001946:	e00f      	b.n	8001968 <HAL_RCC_OscConfig+0x378>
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a56      	ldr	r2, [pc, #344]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fa2c 	bl	8000dcc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff fa28 	bl	8000dcc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e140      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ed      	beq.n	8001978 <HAL_RCC_OscConfig+0x388>
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fa15 	bl	8000dcc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fa11 	bl	8000dcc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e129      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019bc:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ed      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f6:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f9e4 	bl	8000dcc <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a08:	f7ff f9e0 	bl	8000dcc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0fa      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ef      	beq.n	8001a08 <HAL_RCC_OscConfig+0x418>
 8001a28:	e01b      	b.n	8001a62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a30:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f9c7 	bl	8000dcc <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a42:	f7ff f9c3 	bl	8000dcc <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0dd      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ef      	bne.n	8001a42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80d1 	beq.w	8001c0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	f000 808b 	beq.w	8001b90 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d15e      	bne.n	8001b40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f99d 	bl	8000dcc <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e00c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f999 	bl	8000dcc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d905      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0b3      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ec      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_OscConfig+0x62c>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a11      	ldr	r1, [r2, #32]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001acc:	3a01      	subs	r2, #1
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ad6:	0212      	lsls	r2, r2, #8
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ade:	0852      	lsrs	r2, r2, #1
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0552      	lsls	r2, r2, #21
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aea:	0852      	lsrs	r2, r2, #1
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0652      	lsls	r2, r2, #25
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001af6:	06d2      	lsls	r2, r2, #27
 8001af8:	430a      	orrs	r2, r1
 8001afa:	4947      	ldr	r1, [pc, #284]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f958 	bl	8000dcc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f954 	bl	8000dcc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e06e      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x530>
 8001b3e:	e066      	b.n	8001c0e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b35      	ldr	r3, [pc, #212]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b52:	f023 0303 	bic.w	r3, r3, #3
 8001b56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b58:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f930 	bl	8000dcc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f92c 	bl	8000dcc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e046      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x580>
 8001b8e:	e03e      	b.n	8001c0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e039      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_OscConfig+0x628>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d12c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d123      	bne.n	8001c0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d113      	bne.n	8001c0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	019f800c 	.word	0x019f800c

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e11e      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 020f 	bic.w	r2, r3, #15
 8001c4e:	498c      	ldr	r1, [pc, #560]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e106      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d073      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d129      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7c:	4b81      	ldr	r3, [pc, #516]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0f4      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c8c:	f000 f99e 	bl	8001fcc <RCC_GetSysClockFreqFromPLLSource>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4a7c      	ldr	r2, [pc, #496]	; (8001e88 <HAL_RCC_ClockConfig+0x268>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d93f      	bls.n	8001d1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c9a:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d033      	beq.n	8001d1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d12f      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc2:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e024      	b.n	8001d1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0c6      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce8:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0be      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cf8:	f000 f8ce 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4a61      	ldr	r2, [pc, #388]	; (8001e88 <HAL_RCC_ClockConfig+0x268>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d909      	bls.n	8001d1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d0e:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4957      	ldr	r1, [pc, #348]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f84e 	bl	8000dcc <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f84a 	bl	8000dcc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e095      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d023      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d94:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4936      	ldr	r1, [pc, #216]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b80      	cmp	r3, #128	; 0x80
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d21d      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 020f 	bic.w	r2, r3, #15
 8001dd8:	4929      	ldr	r1, [pc, #164]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fff4 	bl	8000dcc <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fff0 	bl	8000dcc <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e03b      	b.n	8001e76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1ed      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4917      	ldr	r1, [pc, #92]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490f      	ldr	r1, [pc, #60]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e4a:	f000 f825 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_RCC_ClockConfig+0x264>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	490c      	ldr	r1, [pc, #48]	; (8001e8c <HAL_RCC_ClockConfig+0x26c>)
 8001e5c:	5ccb      	ldrb	r3, [r1, r3]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x270>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff60 	bl	8000d34 <HAL_InitTick>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	04c4b400 	.word	0x04c4b400
 8001e8c:	08005ab0 	.word	0x08005ab0
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e047      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e03e      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d136      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eec:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	68d2      	ldr	r2, [r2, #12]
 8001ef8:	0a12      	lsrs	r2, r2, #8
 8001efa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
      break;
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	0a12      	lsrs	r2, r2, #8
 8001f14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
      break;
 8001f1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0e5b      	lsrs	r3, r3, #25
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	e001      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f40:	693b      	ldr	r3, [r7, #16]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08005ac0 	.word	0x08005ac0

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa4:	f7ff ffda 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08005ac0 	.word	0x08005ac0

08001fcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d10c      	bne.n	800200a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	0a12      	lsrs	r2, r2, #8
 8001ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
    break;
 8002008:	e00c      	b.n	8002024 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	0a12      	lsrs	r2, r2, #8
 8002018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    break;
 8002022:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0e5b      	lsrs	r3, r3, #25
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	007a1200 	.word	0x007a1200
 8002054:	00f42400 	.word	0x00f42400

08002058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002060:	2300      	movs	r3, #0
 8002062:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002064:	2300      	movs	r3, #0
 8002066:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8098 	beq.w	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10d      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a3f      	ldr	r2, [pc, #252]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a39      	ldr	r2, [pc, #228]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ae:	f7fe fe8d 	bl	8000dcc <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b4:	e009      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7fe fe89 	bl	8000dcc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d902      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	74fb      	strb	r3, [r7, #19]
        break;
 80020c8:	e005      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ef      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d159      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01e      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d019      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fe49 	bl	8000dcc <HAL_GetTick>
 800213a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	e00b      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe fe45 	bl	8000dcc <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d902      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	74fb      	strb	r3, [r7, #19]
            break;
 8002154:	e006      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ec      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002180:	e008      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	74bb      	strb	r3, [r7, #18]
 8002186:	e005      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002194:	7c7b      	ldrb	r3, [r7, #17]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4ba7      	ldr	r3, [pc, #668]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	4aa6      	ldr	r2, [pc, #664]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b2:	4ba1      	ldr	r3, [pc, #644]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f023 0203 	bic.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	499d      	ldr	r1, [pc, #628]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d4:	4b98      	ldr	r3, [pc, #608]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f023 020c 	bic.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4995      	ldr	r1, [pc, #596]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f6:	4b90      	ldr	r3, [pc, #576]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	498c      	ldr	r1, [pc, #560]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4984      	ldr	r1, [pc, #528]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800223a:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	497b      	ldr	r1, [pc, #492]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800225c:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	4973      	ldr	r1, [pc, #460]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227e:	4b6e      	ldr	r3, [pc, #440]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	496a      	ldr	r1, [pc, #424]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4962      	ldr	r1, [pc, #392]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	4959      	ldr	r1, [pc, #356]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e4:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	4951      	ldr	r1, [pc, #324]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	4948      	ldr	r1, [pc, #288]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002328:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4940      	ldr	r1, [pc, #256]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236e:	4932      	ldr	r1, [pc, #200]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237e:	d105      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	4924      	ldr	r1, [pc, #144]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	4916      	ldr	r1, [pc, #88]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d019      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002426:	d109      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a02      	ldr	r2, [pc, #8]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002432:	60d3      	str	r3, [r2, #12]
 8002434:	e002      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4926      	ldr	r1, [pc, #152]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002466:	d105      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	4918      	ldr	r1, [pc, #96]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249e:	d105      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d6:	d105      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e042      	b.n	800258c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7fe fa1d 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2224      	movs	r2, #36	; 0x24
 8002522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fc50 	bl	8002ddc <UART_SetConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e022      	b.n	800258c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 ff40 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 ffc7 	bl	8003518 <UART_CheckIdleState>
 800258a:	4603      	mov	r3, r0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	f040 8083 	bne.w	80026b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Transmit+0x28>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e07b      	b.n	80026b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Transmit+0x3a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e074      	b.n	80026b8 <HAL_UART_Transmit+0x124>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025e6:	f7fe fbf1 	bl	8000dcc <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002604:	d108      	bne.n	8002618 <HAL_UART_Transmit+0x84>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e003      	b.n	8002620 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002628:	e02c      	b.n	8002684 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 ffba 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e039      	b.n	80026b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3302      	adds	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e007      	b.n	8002672 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1cc      	bne.n	800262a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2200      	movs	r2, #0
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 ff87 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e006      	b.n	80026b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d142      	bne.n	800275e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_UART_Receive_IT+0x24>
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e03b      	b.n	8002760 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Receive_IT+0x36>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e034      	b.n	8002760 <HAL_UART_Receive_IT+0xa0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_UART_Receive_IT+0xa8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01f      	beq.n	800274e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	e853 3f00 	ldrex	r3, [r3]
 8002728:	613b      	str	r3, [r7, #16]
   return(result);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	e841 2300 	strex	r3, r2, [r1]
 8002746:	61bb      	str	r3, [r7, #24]
   return(result);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e6      	bne.n	800271c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	461a      	mov	r2, r3
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fff3 	bl	8003740 <UART_Start_Receive_IT>
 800275a:	4603      	mov	r3, r0
 800275c:	e000      	b.n	8002760 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40008000 	.word	0x40008000

0800276c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0ba      	sub	sp, #232	; 0xe8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002796:	f640 030f 	movw	r3, #2063	; 0x80f
 800279a:	4013      	ands	r3, r2
 800279c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11b      	bne.n	80027e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 82d6 	beq.w	8002d82 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
      }
      return;
 80027de:	e2d0      	b.n	8002d82 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 811f 	beq.w	8002a28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_UART_IRQHandler+0x2b0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <HAL_UART_IRQHandler+0x2b4>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8112 	beq.w	8002a28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d011      	beq.n	8002834 <HAL_UART_IRQHandler+0xc8>
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_UART_IRQHandler+0xf8>
 8002840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00b      	beq.n	8002864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2202      	movs	r2, #2
 8002852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <HAL_UART_IRQHandler+0x128>
 8002870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2204      	movs	r2, #4
 8002882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <HAL_UART_IRQHandler+0x2b0>)
 80028b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2208      	movs	r2, #8
 80028be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c6:	f043 0208 	orr.w	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_UART_IRQHandler+0x196>
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 823c 	beq.w	8002d86 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d013      	beq.n	8002942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800291a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d005      	beq.n	8002966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800295a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800295e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04f      	beq.n	8002a06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f001 f814 	bl	8003994 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d141      	bne.n	80029fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3308      	adds	r3, #8
 8002980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002988:	e853 3f00 	ldrex	r3, [r3]
 800298c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3308      	adds	r3, #8
 80029a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1d9      	bne.n	800297a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d013      	beq.n	80029f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_UART_IRQHandler+0x2b8>)
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fb6a 	bl	80010b4 <HAL_DMA_Abort_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d017      	beq.n	8002a16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80029f0:	4610      	mov	r0, r2
 80029f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	e00f      	b.n	8002a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9da 	bl	8002db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e00b      	b.n	8002a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9d6 	bl	8002db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e007      	b.n	8002a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9d2 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002a14:	e1b7      	b.n	8002d86 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a16:	bf00      	nop
    return;
 8002a18:	e1b5      	b.n	8002d86 <HAL_UART_IRQHandler+0x61a>
 8002a1a:	bf00      	nop
 8002a1c:	10000001 	.word	0x10000001
 8002a20:	04000120 	.word	0x04000120
 8002a24:	08003a61 	.word	0x08003a61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 814a 	bne.w	8002cc6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8143 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 813c 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2210      	movs	r2, #16
 8002a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	f040 80b5 	bne.w	8002bd0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8187 	beq.w	8002d8a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f080 817f 	bcs.w	8002d8a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8086 	bne.w	8002bb4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ad6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1da      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3308      	adds	r3, #8
 8002b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e1      	bne.n	8002af2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3308      	adds	r3, #8
 8002b34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e3      	bne.n	8002b2e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	f023 0310 	bic.w	r3, r3, #16
 8002b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b96:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b9e:	e841 2300 	strex	r3, r2, [r1]
 8002ba2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1e4      	bne.n	8002b74 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fa27 	bl	8001002 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8fb 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bce:	e0dc      	b.n	8002d8a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80ce 	beq.w	8002d8e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8002bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80c9 	beq.w	8002d8e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e4      	bne.n	8002bfc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3308      	adds	r3, #8
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	623b      	str	r3, [r7, #32]
   return(result);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3308      	adds	r3, #8
 8002c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e1      	bne.n	8002c32 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e4      	bne.n	8002c82 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f880 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cc4:	e063      	b.n	8002d8e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x584>
 8002cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ce6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 fb57 	bl	800439c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cee:	e051      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d014      	beq.n	8002d26 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03a      	beq.n	8002d92 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
    }
    return;
 8002d24:	e035      	b.n	8002d92 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_UART_IRQHandler+0x5da>
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fea4 	bl	8003a8c <UART_EndTransmit_IT>
    return;
 8002d44:	e026      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_UART_IRQHandler+0x5fa>
 8002d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 fb30 	bl	80043c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d64:	e016      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <HAL_UART_IRQHandler+0x628>
 8002d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da0c      	bge.n	8002d94 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f001 fb18 	bl	80043b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d80:	e008      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
      return;
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
    return;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
      return;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
      return;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
    return;
 8002d92:	bf00      	nop
  }
}
 8002d94:	37e8      	adds	r7, #232	; 0xe8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop

08002d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b08c      	sub	sp, #48	; 0x30
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4baa      	ldr	r3, [pc, #680]	; (80030b4 <UART_SetConfig+0x2d8>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9f      	ldr	r2, [pc, #636]	; (80030b8 <UART_SetConfig+0x2dc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e44:	4313      	orrs	r3, r2
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f023 010f 	bic.w	r1, r3, #15
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a90      	ldr	r2, [pc, #576]	; (80030bc <UART_SetConfig+0x2e0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d125      	bne.n	8002ecc <UART_SetConfig+0xf0>
 8002e80:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <UART_SetConfig+0x2e4>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d81a      	bhi.n	8002ec4 <UART_SetConfig+0xe8>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0xb8>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb5 	.word	0x08002eb5
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002ebd 	.word	0x08002ebd
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eaa:	e116      	b.n	80030da <UART_SetConfig+0x2fe>
 8002eac:	2302      	movs	r3, #2
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	e112      	b.n	80030da <UART_SetConfig+0x2fe>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e10e      	b.n	80030da <UART_SetConfig+0x2fe>
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec2:	e10a      	b.n	80030da <UART_SetConfig+0x2fe>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eca:	e106      	b.n	80030da <UART_SetConfig+0x2fe>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7c      	ldr	r2, [pc, #496]	; (80030c4 <UART_SetConfig+0x2e8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d138      	bne.n	8002f48 <UART_SetConfig+0x16c>
 8002ed6:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <UART_SetConfig+0x2e4>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d82d      	bhi.n	8002f40 <UART_SetConfig+0x164>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x110>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f41 	.word	0x08002f41
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f31 	.word	0x08002f31
 8002f00:	08002f41 	.word	0x08002f41
 8002f04:	08002f41 	.word	0x08002f41
 8002f08:	08002f41 	.word	0x08002f41
 8002f0c:	08002f29 	.word	0x08002f29
 8002f10:	08002f41 	.word	0x08002f41
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	08002f39 	.word	0x08002f39
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f26:	e0d8      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f2e:	e0d4      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f30:	2304      	movs	r3, #4
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f36:	e0d0      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f3e:	e0cc      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f40:	2310      	movs	r3, #16
 8002f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f46:	e0c8      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5e      	ldr	r2, [pc, #376]	; (80030c8 <UART_SetConfig+0x2ec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d125      	bne.n	8002f9e <UART_SetConfig+0x1c2>
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <UART_SetConfig+0x2e4>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d016      	beq.n	8002f8e <UART_SetConfig+0x1b2>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d818      	bhi.n	8002f96 <UART_SetConfig+0x1ba>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d00a      	beq.n	8002f7e <UART_SetConfig+0x1a2>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d814      	bhi.n	8002f96 <UART_SetConfig+0x1ba>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <UART_SetConfig+0x19a>
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d008      	beq.n	8002f86 <UART_SetConfig+0x1aa>
 8002f74:	e00f      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7c:	e0ad      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f84:	e0a9      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f86:	2304      	movs	r3, #4
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8c:	e0a5      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f94:	e0a1      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f96:	2310      	movs	r3, #16
 8002f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9c:	e09d      	b.n	80030da <UART_SetConfig+0x2fe>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <UART_SetConfig+0x2f0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d125      	bne.n	8002ff4 <UART_SetConfig+0x218>
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <UART_SetConfig+0x2e4>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb4:	d016      	beq.n	8002fe4 <UART_SetConfig+0x208>
 8002fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb8:	d818      	bhi.n	8002fec <UART_SetConfig+0x210>
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d00a      	beq.n	8002fd4 <UART_SetConfig+0x1f8>
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d814      	bhi.n	8002fec <UART_SetConfig+0x210>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <UART_SetConfig+0x1f0>
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d008      	beq.n	8002fdc <UART_SetConfig+0x200>
 8002fca:	e00f      	b.n	8002fec <UART_SetConfig+0x210>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd2:	e082      	b.n	80030da <UART_SetConfig+0x2fe>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fda:	e07e      	b.n	80030da <UART_SetConfig+0x2fe>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fe2:	e07a      	b.n	80030da <UART_SetConfig+0x2fe>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fea:	e076      	b.n	80030da <UART_SetConfig+0x2fe>
 8002fec:	2310      	movs	r3, #16
 8002fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ff2:	e072      	b.n	80030da <UART_SetConfig+0x2fe>
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <UART_SetConfig+0x2f4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d12a      	bne.n	8003054 <UART_SetConfig+0x278>
 8002ffe:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <UART_SetConfig+0x2e4>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d01a      	beq.n	8003044 <UART_SetConfig+0x268>
 800300e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003012:	d81b      	bhi.n	800304c <UART_SetConfig+0x270>
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d00c      	beq.n	8003034 <UART_SetConfig+0x258>
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d815      	bhi.n	800304c <UART_SetConfig+0x270>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <UART_SetConfig+0x250>
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d008      	beq.n	800303c <UART_SetConfig+0x260>
 800302a:	e00f      	b.n	800304c <UART_SetConfig+0x270>
 800302c:	2300      	movs	r3, #0
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e052      	b.n	80030da <UART_SetConfig+0x2fe>
 8003034:	2302      	movs	r3, #2
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303a:	e04e      	b.n	80030da <UART_SetConfig+0x2fe>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003042:	e04a      	b.n	80030da <UART_SetConfig+0x2fe>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304a:	e046      	b.n	80030da <UART_SetConfig+0x2fe>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003052:	e042      	b.n	80030da <UART_SetConfig+0x2fe>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <UART_SetConfig+0x2dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d13a      	bne.n	80030d4 <UART_SetConfig+0x2f8>
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <UART_SetConfig+0x2e4>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800306c:	d01a      	beq.n	80030a4 <UART_SetConfig+0x2c8>
 800306e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003072:	d81b      	bhi.n	80030ac <UART_SetConfig+0x2d0>
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d00c      	beq.n	8003094 <UART_SetConfig+0x2b8>
 800307a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307e:	d815      	bhi.n	80030ac <UART_SetConfig+0x2d0>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <UART_SetConfig+0x2b0>
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d008      	beq.n	800309c <UART_SetConfig+0x2c0>
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x2d0>
 800308c:	2300      	movs	r3, #0
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003092:	e022      	b.n	80030da <UART_SetConfig+0x2fe>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800309a:	e01e      	b.n	80030da <UART_SetConfig+0x2fe>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a2:	e01a      	b.n	80030da <UART_SetConfig+0x2fe>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030aa:	e016      	b.n	80030da <UART_SetConfig+0x2fe>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b2:	e012      	b.n	80030da <UART_SetConfig+0x2fe>
 80030b4:	cfff69f3 	.word	0xcfff69f3
 80030b8:	40008000 	.word	0x40008000
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40004400 	.word	0x40004400
 80030c8:	40004800 	.word	0x40004800
 80030cc:	40004c00 	.word	0x40004c00
 80030d0:	40005000 	.word	0x40005000
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4aae      	ldr	r2, [pc, #696]	; (8003398 <UART_SetConfig+0x5bc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	f040 8097 	bne.w	8003214 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d823      	bhi.n	8003136 <UART_SetConfig+0x35a>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <UART_SetConfig+0x318>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003137 	.word	0x08003137
 8003104:	08003127 	.word	0x08003127
 8003108:	08003137 	.word	0x08003137
 800310c:	08003137 	.word	0x08003137
 8003110:	08003137 	.word	0x08003137
 8003114:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe ff2c 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 800311c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800311e:	e010      	b.n	8003142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b9e      	ldr	r3, [pc, #632]	; (800339c <UART_SetConfig+0x5c0>)
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003124:	e00d      	b.n	8003142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe feb7 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003134:	e005      	b.n	8003142 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8130 	beq.w	80033aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	4a94      	ldr	r2, [pc, #592]	; (80033a0 <UART_SetConfig+0x5c4>)
 8003150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003154:	461a      	mov	r2, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	fbb3 f3f2 	udiv	r3, r3, r2
 800315c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	429a      	cmp	r2, r3
 800316c:	d305      	bcc.n	800317a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	429a      	cmp	r2, r3
 8003178:	d903      	bls.n	8003182 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003180:	e113      	b.n	80033aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	60fa      	str	r2, [r7, #12]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	4a84      	ldr	r2, [pc, #528]	; (80033a0 <UART_SetConfig+0x5c4>)
 8003190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003194:	b29b      	uxth	r3, r3
 8003196:	2200      	movs	r2, #0
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a4:	f7fd f894 	bl	80002d0 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	020b      	lsls	r3, r1, #8
 80031ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031be:	0202      	lsls	r2, r0, #8
 80031c0:	6979      	ldr	r1, [r7, #20]
 80031c2:	6849      	ldr	r1, [r1, #4]
 80031c4:	0849      	lsrs	r1, r1, #1
 80031c6:	2000      	movs	r0, #0
 80031c8:	460c      	mov	r4, r1
 80031ca:	4605      	mov	r5, r0
 80031cc:	eb12 0804 	adds.w	r8, r2, r4
 80031d0:	eb43 0905 	adc.w	r9, r3, r5
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	469a      	mov	sl, r3
 80031dc:	4693      	mov	fp, r2
 80031de:	4652      	mov	r2, sl
 80031e0:	465b      	mov	r3, fp
 80031e2:	4640      	mov	r0, r8
 80031e4:	4649      	mov	r1, r9
 80031e6:	f7fd f873 	bl	80002d0 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4613      	mov	r3, r2
 80031f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f8:	d308      	bcc.n	800320c <UART_SetConfig+0x430>
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003200:	d204      	bcs.n	800320c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e0ce      	b.n	80033aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003212:	e0ca      	b.n	80033aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321c:	d166      	bne.n	80032ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800321e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003222:	2b08      	cmp	r3, #8
 8003224:	d827      	bhi.n	8003276 <UART_SetConfig+0x49a>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <UART_SetConfig+0x450>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003251 	.word	0x08003251
 8003230:	08003259 	.word	0x08003259
 8003234:	08003261 	.word	0x08003261
 8003238:	08003277 	.word	0x08003277
 800323c:	08003267 	.word	0x08003267
 8003240:	08003277 	.word	0x08003277
 8003244:	08003277 	.word	0x08003277
 8003248:	08003277 	.word	0x08003277
 800324c:	0800326f 	.word	0x0800326f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003250:	f7fe fe90 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003256:	e014      	b.n	8003282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7fe fea2 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 800325c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800325e:	e010      	b.n	8003282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003260:	4b4e      	ldr	r3, [pc, #312]	; (800339c <UART_SetConfig+0x5c0>)
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003264:	e00d      	b.n	8003282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003266:	f7fe fe17 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800326a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800326c:	e009      	b.n	8003282 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003274:	e005      	b.n	8003282 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8090 	beq.w	80033aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <UART_SetConfig+0x5c4>)
 8003290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003294:	461a      	mov	r2, r3
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	fbb3 f3f2 	udiv	r3, r3, r2
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	441a      	add	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d916      	bls.n	80032e4 <UART_SetConfig+0x508>
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d212      	bcs.n	80032e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f023 030f 	bic.w	r3, r3, #15
 80032c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	8bfb      	ldrh	r3, [r7, #30]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	8bfa      	ldrh	r2, [r7, #30]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e062      	b.n	80033aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032ea:	e05e      	b.n	80033aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d828      	bhi.n	8003346 <UART_SetConfig+0x56a>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <UART_SetConfig+0x520>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003329 	.word	0x08003329
 8003304:	08003331 	.word	0x08003331
 8003308:	08003347 	.word	0x08003347
 800330c:	08003337 	.word	0x08003337
 8003310:	08003347 	.word	0x08003347
 8003314:	08003347 	.word	0x08003347
 8003318:	08003347 	.word	0x08003347
 800331c:	0800333f 	.word	0x0800333f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7fe fe28 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003326:	e014      	b.n	8003352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7fe fe3a 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 800332c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800332e:	e010      	b.n	8003352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <UART_SetConfig+0x5c0>)
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003334:	e00d      	b.n	8003352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7fe fdaf 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800333a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800333c:	e009      	b.n	8003352 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003344:	e005      	b.n	8003352 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003350:	bf00      	nop
    }

    if (pclk != 0U)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d028      	beq.n	80033aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <UART_SetConfig+0x5c4>)
 800335e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003362:	461a      	mov	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	fbb3 f2f2 	udiv	r2, r3, r2
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	441a      	add	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d910      	bls.n	80033a4 <UART_SetConfig+0x5c8>
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d20c      	bcs.n	80033a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	b29a      	uxth	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e009      	b.n	80033aa <UART_SetConfig+0x5ce>
 8003396:	bf00      	nop
 8003398:	40008000 	.word	0x40008000
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	08005ac8 	.word	0x08005ac8
      }
      else
      {
        ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80033c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3730      	adds	r7, #48	; 0x30
 80033ce:	46bd      	mov	sp, r7
 80033d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01a      	beq.n	80034ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d10a      	bne.n	80034ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003528:	f7fd fc50 	bl	8000dcc <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10e      	bne.n	800355a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f82f 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e025      	b.n	80035a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d10e      	bne.n	8003586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f819 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e00f      	b.n	80035a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b09c      	sub	sp, #112	; 0x70
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	e0a9      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	f000 80a5 	beq.w	8003714 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fd fbff 	bl	8000dcc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80035da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d140      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f4:	667b      	str	r3, [r7, #100]	; 0x64
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003600:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800360c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e6      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3308      	adds	r3, #8
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	663b      	str	r3, [r7, #96]	; 0x60
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3308      	adds	r3, #8
 8003630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003632:	64ba      	str	r2, [r7, #72]	; 0x48
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e069      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d051      	beq.n	8003714 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367e:	d149      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003688:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e6      	bne.n	800368a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036dc:	623a      	str	r2, [r7, #32]
 80036de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e010      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	f43f af46 	beq.w	80035c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3770      	adds	r7, #112	; 0x70
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003740:	b480      	push	{r7}
 8003742:	b0a3      	sub	sp, #140	; 0x8c
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d10e      	bne.n	8003792 <UART_Start_Receive_IT+0x52>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <UART_Start_Receive_IT+0x48>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003786:	e02d      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	22ff      	movs	r2, #255	; 0xff
 800378c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003790:	e028      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <UART_Start_Receive_IT+0x76>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d104      	bne.n	80037ac <UART_Start_Receive_IT+0x6c>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037aa:	e01b      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	227f      	movs	r2, #127	; 0x7f
 80037b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037b4:	e016      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037be:	d10d      	bne.n	80037dc <UART_Start_Receive_IT+0x9c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <UART_Start_Receive_IT+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	227f      	movs	r2, #127	; 0x7f
 80037cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037d0:	e008      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	223f      	movs	r2, #63	; 0x3f
 80037d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80037da:	e003      	b.n	80037e4 <UART_Start_Receive_IT+0xa4>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2222      	movs	r2, #34	; 0x22
 80037f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003818:	673a      	str	r2, [r7, #112]	; 0x70
 800381a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800381e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e3      	bne.n	80037f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d153      	bne.n	80038de <UART_Start_Receive_IT+0x19e>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	429a      	cmp	r2, r3
 8003840:	d34d      	bcc.n	80038de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384a:	d107      	bne.n	800385c <UART_Start_Receive_IT+0x11c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <UART_Start_Receive_IT+0x244>)
 8003858:	671a      	str	r2, [r3, #112]	; 0x70
 800385a:	e002      	b.n	8003862 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a4a      	ldr	r2, [pc, #296]	; (8003988 <UART_Start_Receive_IT+0x248>)
 8003860:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01a      	beq.n	80038a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003896:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800389a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e4      	bne.n	8003872 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_Start_Receive_IT+0x168>
 80038dc:	e04a      	b.n	8003974 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d107      	bne.n	80038f8 <UART_Start_Receive_IT+0x1b8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a26      	ldr	r2, [pc, #152]	; (800398c <UART_Start_Receive_IT+0x24c>)
 80038f4:	671a      	str	r2, [r3, #112]	; 0x70
 80038f6:	e002      	b.n	80038fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <UART_Start_Receive_IT+0x250>)
 80038fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003922:	677b      	str	r3, [r7, #116]	; 0x74
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
 800392e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e6      	bne.n	800390e <UART_Start_Receive_IT+0x1ce>
 8003940:	e018      	b.n	8003974 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	613b      	str	r3, [r7, #16]
   return(result);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f043 0320 	orr.w	r3, r3, #32
 8003956:	67bb      	str	r3, [r7, #120]	; 0x78
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	69f9      	ldr	r1, [r7, #28]
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	61bb      	str	r3, [r7, #24]
   return(result);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e6      	bne.n	8003942 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	378c      	adds	r7, #140	; 0x8c
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0800409d 	.word	0x0800409d
 8003988:	08003da5 	.word	0x08003da5
 800398c:	08003c43 	.word	0x08003c43
 8003990:	08003ae3 	.word	0x08003ae3

08003994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b095      	sub	sp, #84	; 0x54
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40
 80039bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e6      	bne.n	800399c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e3      	bne.n	80039ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d118      	bne.n	8003a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003a54:	bf00      	nop
 8003a56:	3754      	adds	r7, #84	; 0x54
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff f996 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6979      	ldr	r1, [r7, #20]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e6      	bne.n	8003a94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff f961 	bl	8002d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ada:	bf00      	nop
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b096      	sub	sp, #88	; 0x58
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003af0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	2b22      	cmp	r3, #34	; 0x22
 8003afc:	f040 8095 	bne.w	8003c2a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b0a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003b0e:	b2d9      	uxtb	r1, r3
 8003b10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d178      	bne.n	8003c3a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b66:	647b      	str	r3, [r7, #68]	; 0x44
 8003b68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e6      	bne.n	8003b48 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d12e      	bne.n	8003c22 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0310 	bic.w	r3, r3, #16
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d103      	bne.n	8003c12 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff f8d2 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c20:	e00b      	b.n	8003c3a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc fcd6 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8003c28:	e007      	b.n	8003c3a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0208 	orr.w	r2, r2, #8
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	3758      	adds	r7, #88	; 0x58
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b096      	sub	sp, #88	; 0x58
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	2b22      	cmp	r3, #34	; 0x22
 8003c5c:	f040 8095 	bne.w	8003d8a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003c74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	1c9a      	adds	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d178      	bne.n	8003d9a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e6      	bne.n	8003ca8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d12e      	bne.n	8003d82 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0310 	bic.w	r3, r3, #16
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	613b      	str	r3, [r7, #16]
   return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d103      	bne.n	8003d72 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff f822 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d80:	e00b      	b.n	8003d9a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc fc26 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8003d88:	e007      	b.n	8003d9a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0208 	orr.w	r2, r2, #8
 8003d98:	619a      	str	r2, [r3, #24]
}
 8003d9a:	bf00      	nop
 8003d9c:	3758      	adds	r7, #88	; 0x58
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0a6      	sub	sp, #152	; 0x98
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003db2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	2b22      	cmp	r3, #34	; 0x22
 8003ddc:	f040 814f 	bne.w	800407e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003de6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003dea:	e0f6      	b.n	8003fda <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003df6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8003dfa:	b2d9      	uxtb	r1, r3
 8003dfc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	400a      	ands	r2, r1
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d053      	beq.n	8003ee6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <UART_RxISR_8BIT_FIFOEN+0xca>
 8003e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d011      	beq.n	8003e9e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d011      	beq.n	8003ece <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fe ff69 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d173      	bne.n	8003fda <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f16:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003f1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e4      	bne.n	8003ef2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f4c:	657a      	str	r2, [r7, #84]	; 0x54
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d12e      	bne.n	8003fd4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	f023 0310 	bic.w	r3, r3, #16
 8003f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d103      	bne.n	8003fc4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fe fef9 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
 8003fd2:	e002      	b.n	8003fda <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fc fafd 	bl	80005d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003fda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8003fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f47f aefe 	bne.w	8003dec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ff6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ffa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d045      	beq.n	800408e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800400c:	429a      	cmp	r2, r3
 800400e:	d23e      	bcs.n	800408e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	673b      	str	r3, [r7, #112]	; 0x70
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e5      	bne.n	8004010 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004048:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60bb      	str	r3, [r7, #8]
   return(result);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f043 0320 	orr.w	r3, r3, #32
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800407c:	e007      	b.n	800408e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0208 	orr.w	r2, r2, #8
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	3798      	adds	r7, #152	; 0x98
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	08003ae3 	.word	0x08003ae3

0800409c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b0a8      	sub	sp, #160	; 0xa0
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	2b22      	cmp	r3, #34	; 0x22
 80040d4:	f040 8153 	bne.w	800437e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80040de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80040e2:	e0fa      	b.n	80042da <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80040f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80040fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80040fe:	4013      	ands	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004106:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	1c9a      	adds	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800412e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	2b00      	cmp	r3, #0
 8004138:	d053      	beq.n	80041e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800413a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d011      	beq.n	800416a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800416a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2202      	movs	r2, #2
 8004188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004190:	f043 0204 	orr.w	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800419a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80041a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2204      	movs	r2, #4
 80041b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c0:	f043 0202 	orr.w	r2, r3, #2
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fe fdeb 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d175      	bne.n	80042da <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004212:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800421e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e4      	bne.n	80041ee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800424c:	65ba      	str	r2, [r7, #88]	; 0x58
 800424e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004252:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e1      	bne.n	8004224 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d12e      	bne.n	80042d4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
 800429c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e6      	bne.n	800427c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d103      	bne.n	80042c4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fe fd79 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
 80042d2:	e002      	b.n	80042da <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc f97d 	bl	80005d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d006      	beq.n	80042f0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80042e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f aefa 	bne.w	80040e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d045      	beq.n	800438e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004308:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800430c:	429a      	cmp	r2, r3
 800430e:	d23e      	bcs.n	800438e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	623b      	str	r3, [r7, #32]
   return(result);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	677b      	str	r3, [r7, #116]	; 0x74
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004330:	633a      	str	r2, [r7, #48]	; 0x30
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a14      	ldr	r2, [pc, #80]	; (8004398 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004348:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60fb      	str	r3, [r7, #12]
   return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f043 0320 	orr.w	r3, r3, #32
 800435e:	673b      	str	r3, [r7, #112]	; 0x70
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	617b      	str	r3, [r7, #20]
   return(result);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800437c:	e007      	b.n	800438e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0208 	orr.w	r2, r2, #8
 800438c:	619a      	str	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	37a0      	adds	r7, #160	; 0xa0
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	08003c43 	.word	0x08003c43

0800439c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_UARTEx_DisableFifoMode+0x16>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e027      	b.n	800443e <HAL_UARTEx_DisableFifoMode+0x66>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800441c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800445e:	2302      	movs	r3, #2
 8004460:	e02d      	b.n	80044be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2224      	movs	r2, #36	; 0x24
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f850 	bl	8004544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044da:	2302      	movs	r3, #2
 80044dc:	e02d      	b.n	800453a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2224      	movs	r2, #36	; 0x24
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f812 	bl	8004544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004564:	e031      	b.n	80045ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004566:	2308      	movs	r3, #8
 8004568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800456a:	2308      	movs	r3, #8
 800456c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	0e5b      	lsrs	r3, r3, #25
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	0f5b      	lsrs	r3, r3, #29
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	7b3a      	ldrb	r2, [r7, #12]
 8004592:	4911      	ldr	r1, [pc, #68]	; (80045d8 <UARTEx_SetNbDataToProcess+0x94>)
 8004594:	5c8a      	ldrb	r2, [r1, r2]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800459a:	7b3a      	ldrb	r2, [r7, #12]
 800459c:	490f      	ldr	r1, [pc, #60]	; (80045dc <UARTEx_SetNbDataToProcess+0x98>)
 800459e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	7b7a      	ldrb	r2, [r7, #13]
 80045b0:	4909      	ldr	r1, [pc, #36]	; (80045d8 <UARTEx_SetNbDataToProcess+0x94>)
 80045b2:	5c8a      	ldrb	r2, [r1, r2]
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045b8:	7b7a      	ldrb	r2, [r7, #13]
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <UARTEx_SetNbDataToProcess+0x98>)
 80045bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045be:	fb93 f3f2 	sdiv	r3, r3, r2
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	08005ae0 	.word	0x08005ae0
 80045dc:	08005ae8 	.word	0x08005ae8

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4d0d      	ldr	r5, [pc, #52]	; (8004624 <__libc_init_array+0x38>)
 80045f0:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f2:	1b64      	subs	r4, r4, r5
 80045f4:	10a4      	asrs	r4, r4, #2
 80045f6:	2600      	movs	r6, #0
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	4d0b      	ldr	r5, [pc, #44]	; (800462c <__libc_init_array+0x40>)
 80045fe:	4c0c      	ldr	r4, [pc, #48]	; (8004630 <__libc_init_array+0x44>)
 8004600:	f001 fa48 	bl	8005a94 <_init>
 8004604:	1b64      	subs	r4, r4, r5
 8004606:	10a4      	asrs	r4, r4, #2
 8004608:	2600      	movs	r6, #0
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08005c40 	.word	0x08005c40
 8004628:	08005c40 	.word	0x08005c40
 800462c:	08005c40 	.word	0x08005c40
 8004630:	08005c44 	.word	0x08005c44

08004634 <memset>:
 8004634:	4402      	add	r2, r0
 8004636:	4603      	mov	r3, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <rand>:
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <rand+0x5c>)
 8004646:	b510      	push	{r4, lr}
 8004648:	681c      	ldr	r4, [r3, #0]
 800464a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800464c:	b9b3      	cbnz	r3, 800467c <rand+0x38>
 800464e:	2018      	movs	r0, #24
 8004650:	f000 f89a 	bl	8004788 <malloc>
 8004654:	63a0      	str	r0, [r4, #56]	; 0x38
 8004656:	b928      	cbnz	r0, 8004664 <rand+0x20>
 8004658:	4602      	mov	r2, r0
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <rand+0x60>)
 800465c:	4812      	ldr	r0, [pc, #72]	; (80046a8 <rand+0x64>)
 800465e:	214e      	movs	r1, #78	; 0x4e
 8004660:	f000 f862 	bl	8004728 <__assert_func>
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <rand+0x68>)
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <rand+0x6c>)
 8004668:	e9c0 2300 	strd	r2, r3, [r0]
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <rand+0x70>)
 800466e:	6083      	str	r3, [r0, #8]
 8004670:	230b      	movs	r3, #11
 8004672:	8183      	strh	r3, [r0, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	2300      	movs	r3, #0
 8004678:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800467c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <rand+0x74>)
 8004680:	6920      	ldr	r0, [r4, #16]
 8004682:	6963      	ldr	r3, [r4, #20]
 8004684:	490d      	ldr	r1, [pc, #52]	; (80046bc <rand+0x78>)
 8004686:	4342      	muls	r2, r0
 8004688:	fb01 2203 	mla	r2, r1, r3, r2
 800468c:	fba0 0101 	umull	r0, r1, r0, r1
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	eb42 0001 	adc.w	r0, r2, r1
 8004696:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800469a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800469e:	bd10      	pop	{r4, pc}
 80046a0:	2000000c 	.word	0x2000000c
 80046a4:	08005af4 	.word	0x08005af4
 80046a8:	08005b0b 	.word	0x08005b0b
 80046ac:	abcd330e 	.word	0xabcd330e
 80046b0:	e66d1234 	.word	0xe66d1234
 80046b4:	0005deec 	.word	0x0005deec
 80046b8:	5851f42d 	.word	0x5851f42d
 80046bc:	4c957f2d 	.word	0x4c957f2d

080046c0 <sniprintf>:
 80046c0:	b40c      	push	{r2, r3}
 80046c2:	b530      	push	{r4, r5, lr}
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <sniprintf+0x64>)
 80046c6:	1e0c      	subs	r4, r1, #0
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	b09d      	sub	sp, #116	; 0x74
 80046cc:	da08      	bge.n	80046e0 <sniprintf+0x20>
 80046ce:	238b      	movs	r3, #139	; 0x8b
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	b01d      	add	sp, #116	; 0x74
 80046d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046dc:	b002      	add	sp, #8
 80046de:	4770      	bx	lr
 80046e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046e8:	bf14      	ite	ne
 80046ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046ee:	4623      	moveq	r3, r4
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	9307      	str	r3, [sp, #28]
 80046f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f8:	9002      	str	r0, [sp, #8]
 80046fa:	9006      	str	r0, [sp, #24]
 80046fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004700:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004702:	ab21      	add	r3, sp, #132	; 0x84
 8004704:	a902      	add	r1, sp, #8
 8004706:	4628      	mov	r0, r5
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	f000 f981 	bl	8004a10 <_svfiprintf_r>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	bfbc      	itt	lt
 8004712:	238b      	movlt	r3, #139	; 0x8b
 8004714:	602b      	strlt	r3, [r5, #0]
 8004716:	2c00      	cmp	r4, #0
 8004718:	d0dd      	beq.n	80046d6 <sniprintf+0x16>
 800471a:	9b02      	ldr	r3, [sp, #8]
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e7d9      	b.n	80046d6 <sniprintf+0x16>
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c

08004728 <__assert_func>:
 8004728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800472a:	4614      	mov	r4, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <__assert_func+0x2c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4605      	mov	r5, r0
 8004734:	68d8      	ldr	r0, [r3, #12]
 8004736:	b14c      	cbz	r4, 800474c <__assert_func+0x24>
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <__assert_func+0x30>)
 800473a:	9100      	str	r1, [sp, #0]
 800473c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004740:	4906      	ldr	r1, [pc, #24]	; (800475c <__assert_func+0x34>)
 8004742:	462b      	mov	r3, r5
 8004744:	f000 f80e 	bl	8004764 <fiprintf>
 8004748:	f000 fe20 	bl	800538c <abort>
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <__assert_func+0x38>)
 800474e:	461c      	mov	r4, r3
 8004750:	e7f3      	b.n	800473a <__assert_func+0x12>
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	08005b66 	.word	0x08005b66
 800475c:	08005b73 	.word	0x08005b73
 8004760:	08005ba1 	.word	0x08005ba1

08004764 <fiprintf>:
 8004764:	b40e      	push	{r1, r2, r3}
 8004766:	b503      	push	{r0, r1, lr}
 8004768:	4601      	mov	r1, r0
 800476a:	ab03      	add	r3, sp, #12
 800476c:	4805      	ldr	r0, [pc, #20]	; (8004784 <fiprintf+0x20>)
 800476e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	f000 fa75 	bl	8004c64 <_vfiprintf_r>
 800477a:	b002      	add	sp, #8
 800477c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004780:	b003      	add	sp, #12
 8004782:	4770      	bx	lr
 8004784:	2000000c 	.word	0x2000000c

08004788 <malloc>:
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <malloc+0xc>)
 800478a:	4601      	mov	r1, r0
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	f000 b86f 	b.w	8004870 <_malloc_r>
 8004792:	bf00      	nop
 8004794:	2000000c 	.word	0x2000000c

08004798 <_free_r>:
 8004798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800479a:	2900      	cmp	r1, #0
 800479c:	d044      	beq.n	8004828 <_free_r+0x90>
 800479e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047a2:	9001      	str	r0, [sp, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f1a1 0404 	sub.w	r4, r1, #4
 80047aa:	bfb8      	it	lt
 80047ac:	18e4      	addlt	r4, r4, r3
 80047ae:	f001 f83d 	bl	800582c <__malloc_lock>
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <_free_r+0x94>)
 80047b4:	9801      	ldr	r0, [sp, #4]
 80047b6:	6813      	ldr	r3, [r2, #0]
 80047b8:	b933      	cbnz	r3, 80047c8 <_free_r+0x30>
 80047ba:	6063      	str	r3, [r4, #4]
 80047bc:	6014      	str	r4, [r2, #0]
 80047be:	b003      	add	sp, #12
 80047c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047c4:	f001 b838 	b.w	8005838 <__malloc_unlock>
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d908      	bls.n	80047de <_free_r+0x46>
 80047cc:	6825      	ldr	r5, [r4, #0]
 80047ce:	1961      	adds	r1, r4, r5
 80047d0:	428b      	cmp	r3, r1
 80047d2:	bf01      	itttt	eq
 80047d4:	6819      	ldreq	r1, [r3, #0]
 80047d6:	685b      	ldreq	r3, [r3, #4]
 80047d8:	1949      	addeq	r1, r1, r5
 80047da:	6021      	streq	r1, [r4, #0]
 80047dc:	e7ed      	b.n	80047ba <_free_r+0x22>
 80047de:	461a      	mov	r2, r3
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b10b      	cbz	r3, 80047e8 <_free_r+0x50>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d9fa      	bls.n	80047de <_free_r+0x46>
 80047e8:	6811      	ldr	r1, [r2, #0]
 80047ea:	1855      	adds	r5, r2, r1
 80047ec:	42a5      	cmp	r5, r4
 80047ee:	d10b      	bne.n	8004808 <_free_r+0x70>
 80047f0:	6824      	ldr	r4, [r4, #0]
 80047f2:	4421      	add	r1, r4
 80047f4:	1854      	adds	r4, r2, r1
 80047f6:	42a3      	cmp	r3, r4
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	d1e0      	bne.n	80047be <_free_r+0x26>
 80047fc:	681c      	ldr	r4, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	6053      	str	r3, [r2, #4]
 8004802:	4421      	add	r1, r4
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	e7da      	b.n	80047be <_free_r+0x26>
 8004808:	d902      	bls.n	8004810 <_free_r+0x78>
 800480a:	230c      	movs	r3, #12
 800480c:	6003      	str	r3, [r0, #0]
 800480e:	e7d6      	b.n	80047be <_free_r+0x26>
 8004810:	6825      	ldr	r5, [r4, #0]
 8004812:	1961      	adds	r1, r4, r5
 8004814:	428b      	cmp	r3, r1
 8004816:	bf04      	itt	eq
 8004818:	6819      	ldreq	r1, [r3, #0]
 800481a:	685b      	ldreq	r3, [r3, #4]
 800481c:	6063      	str	r3, [r4, #4]
 800481e:	bf04      	itt	eq
 8004820:	1949      	addeq	r1, r1, r5
 8004822:	6021      	streq	r1, [r4, #0]
 8004824:	6054      	str	r4, [r2, #4]
 8004826:	e7ca      	b.n	80047be <_free_r+0x26>
 8004828:	b003      	add	sp, #12
 800482a:	bd30      	pop	{r4, r5, pc}
 800482c:	20000284 	.word	0x20000284

08004830 <sbrk_aligned>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4e0e      	ldr	r6, [pc, #56]	; (800486c <sbrk_aligned+0x3c>)
 8004834:	460c      	mov	r4, r1
 8004836:	6831      	ldr	r1, [r6, #0]
 8004838:	4605      	mov	r5, r0
 800483a:	b911      	cbnz	r1, 8004842 <sbrk_aligned+0x12>
 800483c:	f000 fcd6 	bl	80051ec <_sbrk_r>
 8004840:	6030      	str	r0, [r6, #0]
 8004842:	4621      	mov	r1, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f000 fcd1 	bl	80051ec <_sbrk_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d00a      	beq.n	8004864 <sbrk_aligned+0x34>
 800484e:	1cc4      	adds	r4, r0, #3
 8004850:	f024 0403 	bic.w	r4, r4, #3
 8004854:	42a0      	cmp	r0, r4
 8004856:	d007      	beq.n	8004868 <sbrk_aligned+0x38>
 8004858:	1a21      	subs	r1, r4, r0
 800485a:	4628      	mov	r0, r5
 800485c:	f000 fcc6 	bl	80051ec <_sbrk_r>
 8004860:	3001      	adds	r0, #1
 8004862:	d101      	bne.n	8004868 <sbrk_aligned+0x38>
 8004864:	f04f 34ff 	mov.w	r4, #4294967295
 8004868:	4620      	mov	r0, r4
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	20000288 	.word	0x20000288

08004870 <_malloc_r>:
 8004870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004874:	1ccd      	adds	r5, r1, #3
 8004876:	f025 0503 	bic.w	r5, r5, #3
 800487a:	3508      	adds	r5, #8
 800487c:	2d0c      	cmp	r5, #12
 800487e:	bf38      	it	cc
 8004880:	250c      	movcc	r5, #12
 8004882:	2d00      	cmp	r5, #0
 8004884:	4607      	mov	r7, r0
 8004886:	db01      	blt.n	800488c <_malloc_r+0x1c>
 8004888:	42a9      	cmp	r1, r5
 800488a:	d905      	bls.n	8004898 <_malloc_r+0x28>
 800488c:	230c      	movs	r3, #12
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	2600      	movs	r6, #0
 8004892:	4630      	mov	r0, r6
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	4e2e      	ldr	r6, [pc, #184]	; (8004954 <_malloc_r+0xe4>)
 800489a:	f000 ffc7 	bl	800582c <__malloc_lock>
 800489e:	6833      	ldr	r3, [r6, #0]
 80048a0:	461c      	mov	r4, r3
 80048a2:	bb34      	cbnz	r4, 80048f2 <_malloc_r+0x82>
 80048a4:	4629      	mov	r1, r5
 80048a6:	4638      	mov	r0, r7
 80048a8:	f7ff ffc2 	bl	8004830 <sbrk_aligned>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	4604      	mov	r4, r0
 80048b0:	d14d      	bne.n	800494e <_malloc_r+0xde>
 80048b2:	6834      	ldr	r4, [r6, #0]
 80048b4:	4626      	mov	r6, r4
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d140      	bne.n	800493c <_malloc_r+0xcc>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	4631      	mov	r1, r6
 80048be:	4638      	mov	r0, r7
 80048c0:	eb04 0803 	add.w	r8, r4, r3
 80048c4:	f000 fc92 	bl	80051ec <_sbrk_r>
 80048c8:	4580      	cmp	r8, r0
 80048ca:	d13a      	bne.n	8004942 <_malloc_r+0xd2>
 80048cc:	6821      	ldr	r1, [r4, #0]
 80048ce:	3503      	adds	r5, #3
 80048d0:	1a6d      	subs	r5, r5, r1
 80048d2:	f025 0503 	bic.w	r5, r5, #3
 80048d6:	3508      	adds	r5, #8
 80048d8:	2d0c      	cmp	r5, #12
 80048da:	bf38      	it	cc
 80048dc:	250c      	movcc	r5, #12
 80048de:	4629      	mov	r1, r5
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7ff ffa5 	bl	8004830 <sbrk_aligned>
 80048e6:	3001      	adds	r0, #1
 80048e8:	d02b      	beq.n	8004942 <_malloc_r+0xd2>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	442b      	add	r3, r5
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	e00e      	b.n	8004910 <_malloc_r+0xa0>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	1b52      	subs	r2, r2, r5
 80048f6:	d41e      	bmi.n	8004936 <_malloc_r+0xc6>
 80048f8:	2a0b      	cmp	r2, #11
 80048fa:	d916      	bls.n	800492a <_malloc_r+0xba>
 80048fc:	1961      	adds	r1, r4, r5
 80048fe:	42a3      	cmp	r3, r4
 8004900:	6025      	str	r5, [r4, #0]
 8004902:	bf18      	it	ne
 8004904:	6059      	strne	r1, [r3, #4]
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	bf08      	it	eq
 800490a:	6031      	streq	r1, [r6, #0]
 800490c:	5162      	str	r2, [r4, r5]
 800490e:	604b      	str	r3, [r1, #4]
 8004910:	4638      	mov	r0, r7
 8004912:	f104 060b 	add.w	r6, r4, #11
 8004916:	f000 ff8f 	bl	8005838 <__malloc_unlock>
 800491a:	f026 0607 	bic.w	r6, r6, #7
 800491e:	1d23      	adds	r3, r4, #4
 8004920:	1af2      	subs	r2, r6, r3
 8004922:	d0b6      	beq.n	8004892 <_malloc_r+0x22>
 8004924:	1b9b      	subs	r3, r3, r6
 8004926:	50a3      	str	r3, [r4, r2]
 8004928:	e7b3      	b.n	8004892 <_malloc_r+0x22>
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	42a3      	cmp	r3, r4
 800492e:	bf0c      	ite	eq
 8004930:	6032      	streq	r2, [r6, #0]
 8004932:	605a      	strne	r2, [r3, #4]
 8004934:	e7ec      	b.n	8004910 <_malloc_r+0xa0>
 8004936:	4623      	mov	r3, r4
 8004938:	6864      	ldr	r4, [r4, #4]
 800493a:	e7b2      	b.n	80048a2 <_malloc_r+0x32>
 800493c:	4634      	mov	r4, r6
 800493e:	6876      	ldr	r6, [r6, #4]
 8004940:	e7b9      	b.n	80048b6 <_malloc_r+0x46>
 8004942:	230c      	movs	r3, #12
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4638      	mov	r0, r7
 8004948:	f000 ff76 	bl	8005838 <__malloc_unlock>
 800494c:	e7a1      	b.n	8004892 <_malloc_r+0x22>
 800494e:	6025      	str	r5, [r4, #0]
 8004950:	e7de      	b.n	8004910 <_malloc_r+0xa0>
 8004952:	bf00      	nop
 8004954:	20000284 	.word	0x20000284

08004958 <__ssputs_r>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	688e      	ldr	r6, [r1, #8]
 800495e:	429e      	cmp	r6, r3
 8004960:	4682      	mov	sl, r0
 8004962:	460c      	mov	r4, r1
 8004964:	4690      	mov	r8, r2
 8004966:	461f      	mov	r7, r3
 8004968:	d838      	bhi.n	80049dc <__ssputs_r+0x84>
 800496a:	898a      	ldrh	r2, [r1, #12]
 800496c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004970:	d032      	beq.n	80049d8 <__ssputs_r+0x80>
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	6909      	ldr	r1, [r1, #16]
 8004976:	eba5 0901 	sub.w	r9, r5, r1
 800497a:	6965      	ldr	r5, [r4, #20]
 800497c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004984:	3301      	adds	r3, #1
 8004986:	444b      	add	r3, r9
 8004988:	106d      	asrs	r5, r5, #1
 800498a:	429d      	cmp	r5, r3
 800498c:	bf38      	it	cc
 800498e:	461d      	movcc	r5, r3
 8004990:	0553      	lsls	r3, r2, #21
 8004992:	d531      	bpl.n	80049f8 <__ssputs_r+0xa0>
 8004994:	4629      	mov	r1, r5
 8004996:	f7ff ff6b 	bl	8004870 <_malloc_r>
 800499a:	4606      	mov	r6, r0
 800499c:	b950      	cbnz	r0, 80049b4 <__ssputs_r+0x5c>
 800499e:	230c      	movs	r3, #12
 80049a0:	f8ca 3000 	str.w	r3, [sl]
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	6921      	ldr	r1, [r4, #16]
 80049b6:	464a      	mov	r2, r9
 80049b8:	f000 ff10 	bl	80057dc <memcpy>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	6126      	str	r6, [r4, #16]
 80049ca:	6165      	str	r5, [r4, #20]
 80049cc:	444e      	add	r6, r9
 80049ce:	eba5 0509 	sub.w	r5, r5, r9
 80049d2:	6026      	str	r6, [r4, #0]
 80049d4:	60a5      	str	r5, [r4, #8]
 80049d6:	463e      	mov	r6, r7
 80049d8:	42be      	cmp	r6, r7
 80049da:	d900      	bls.n	80049de <__ssputs_r+0x86>
 80049dc:	463e      	mov	r6, r7
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	4632      	mov	r2, r6
 80049e2:	4641      	mov	r1, r8
 80049e4:	f000 ff08 	bl	80057f8 <memmove>
 80049e8:	68a3      	ldr	r3, [r4, #8]
 80049ea:	1b9b      	subs	r3, r3, r6
 80049ec:	60a3      	str	r3, [r4, #8]
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	4433      	add	r3, r6
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7db      	b.n	80049b0 <__ssputs_r+0x58>
 80049f8:	462a      	mov	r2, r5
 80049fa:	f000 ff23 	bl	8005844 <_realloc_r>
 80049fe:	4606      	mov	r6, r0
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d1e1      	bne.n	80049c8 <__ssputs_r+0x70>
 8004a04:	6921      	ldr	r1, [r4, #16]
 8004a06:	4650      	mov	r0, sl
 8004a08:	f7ff fec6 	bl	8004798 <_free_r>
 8004a0c:	e7c7      	b.n	800499e <__ssputs_r+0x46>
	...

08004a10 <_svfiprintf_r>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	4698      	mov	r8, r3
 8004a16:	898b      	ldrh	r3, [r1, #12]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	b09d      	sub	sp, #116	; 0x74
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	d50e      	bpl.n	8004a42 <_svfiprintf_r+0x32>
 8004a24:	690b      	ldr	r3, [r1, #16]
 8004a26:	b963      	cbnz	r3, 8004a42 <_svfiprintf_r+0x32>
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	f7ff ff21 	bl	8004870 <_malloc_r>
 8004a2e:	6028      	str	r0, [r5, #0]
 8004a30:	6128      	str	r0, [r5, #16]
 8004a32:	b920      	cbnz	r0, 8004a3e <_svfiprintf_r+0x2e>
 8004a34:	230c      	movs	r3, #12
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	e0d1      	b.n	8004be2 <_svfiprintf_r+0x1d2>
 8004a3e:	2340      	movs	r3, #64	; 0x40
 8004a40:	616b      	str	r3, [r5, #20]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9309      	str	r3, [sp, #36]	; 0x24
 8004a46:	2320      	movs	r3, #32
 8004a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a50:	2330      	movs	r3, #48	; 0x30
 8004a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bfc <_svfiprintf_r+0x1ec>
 8004a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a5a:	f04f 0901 	mov.w	r9, #1
 8004a5e:	4623      	mov	r3, r4
 8004a60:	469a      	mov	sl, r3
 8004a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a66:	b10a      	cbz	r2, 8004a6c <_svfiprintf_r+0x5c>
 8004a68:	2a25      	cmp	r2, #37	; 0x25
 8004a6a:	d1f9      	bne.n	8004a60 <_svfiprintf_r+0x50>
 8004a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a70:	d00b      	beq.n	8004a8a <_svfiprintf_r+0x7a>
 8004a72:	465b      	mov	r3, fp
 8004a74:	4622      	mov	r2, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f7ff ff6d 	bl	8004958 <__ssputs_r>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f000 80aa 	beq.w	8004bd8 <_svfiprintf_r+0x1c8>
 8004a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a86:	445a      	add	r2, fp
 8004a88:	9209      	str	r2, [sp, #36]	; 0x24
 8004a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80a2 	beq.w	8004bd8 <_svfiprintf_r+0x1c8>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a9e:	f10a 0a01 	add.w	sl, sl, #1
 8004aa2:	9304      	str	r3, [sp, #16]
 8004aa4:	9307      	str	r3, [sp, #28]
 8004aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8004aac:	4654      	mov	r4, sl
 8004aae:	2205      	movs	r2, #5
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	4851      	ldr	r0, [pc, #324]	; (8004bfc <_svfiprintf_r+0x1ec>)
 8004ab6:	f7fb fbbb 	bl	8000230 <memchr>
 8004aba:	9a04      	ldr	r2, [sp, #16]
 8004abc:	b9d8      	cbnz	r0, 8004af6 <_svfiprintf_r+0xe6>
 8004abe:	06d0      	lsls	r0, r2, #27
 8004ac0:	bf44      	itt	mi
 8004ac2:	2320      	movmi	r3, #32
 8004ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac8:	0711      	lsls	r1, r2, #28
 8004aca:	bf44      	itt	mi
 8004acc:	232b      	movmi	r3, #43	; 0x2b
 8004ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad8:	d015      	beq.n	8004b06 <_svfiprintf_r+0xf6>
 8004ada:	9a07      	ldr	r2, [sp, #28]
 8004adc:	4654      	mov	r4, sl
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f04f 0c0a 	mov.w	ip, #10
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aea:	3b30      	subs	r3, #48	; 0x30
 8004aec:	2b09      	cmp	r3, #9
 8004aee:	d94e      	bls.n	8004b8e <_svfiprintf_r+0x17e>
 8004af0:	b1b0      	cbz	r0, 8004b20 <_svfiprintf_r+0x110>
 8004af2:	9207      	str	r2, [sp, #28]
 8004af4:	e014      	b.n	8004b20 <_svfiprintf_r+0x110>
 8004af6:	eba0 0308 	sub.w	r3, r0, r8
 8004afa:	fa09 f303 	lsl.w	r3, r9, r3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	9304      	str	r3, [sp, #16]
 8004b02:	46a2      	mov	sl, r4
 8004b04:	e7d2      	b.n	8004aac <_svfiprintf_r+0x9c>
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	9103      	str	r1, [sp, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfbb      	ittet	lt
 8004b12:	425b      	neglt	r3, r3
 8004b14:	f042 0202 	orrlt.w	r2, r2, #2
 8004b18:	9307      	strge	r3, [sp, #28]
 8004b1a:	9307      	strlt	r3, [sp, #28]
 8004b1c:	bfb8      	it	lt
 8004b1e:	9204      	strlt	r2, [sp, #16]
 8004b20:	7823      	ldrb	r3, [r4, #0]
 8004b22:	2b2e      	cmp	r3, #46	; 0x2e
 8004b24:	d10c      	bne.n	8004b40 <_svfiprintf_r+0x130>
 8004b26:	7863      	ldrb	r3, [r4, #1]
 8004b28:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2a:	d135      	bne.n	8004b98 <_svfiprintf_r+0x188>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	9203      	str	r2, [sp, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bfb8      	it	lt
 8004b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b3c:	3402      	adds	r4, #2
 8004b3e:	9305      	str	r3, [sp, #20]
 8004b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c0c <_svfiprintf_r+0x1fc>
 8004b44:	7821      	ldrb	r1, [r4, #0]
 8004b46:	2203      	movs	r2, #3
 8004b48:	4650      	mov	r0, sl
 8004b4a:	f7fb fb71 	bl	8000230 <memchr>
 8004b4e:	b140      	cbz	r0, 8004b62 <_svfiprintf_r+0x152>
 8004b50:	2340      	movs	r3, #64	; 0x40
 8004b52:	eba0 000a 	sub.w	r0, r0, sl
 8004b56:	fa03 f000 	lsl.w	r0, r3, r0
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	4303      	orrs	r3, r0
 8004b5e:	3401      	adds	r4, #1
 8004b60:	9304      	str	r3, [sp, #16]
 8004b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b66:	4826      	ldr	r0, [pc, #152]	; (8004c00 <_svfiprintf_r+0x1f0>)
 8004b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6c:	2206      	movs	r2, #6
 8004b6e:	f7fb fb5f 	bl	8000230 <memchr>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d038      	beq.n	8004be8 <_svfiprintf_r+0x1d8>
 8004b76:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <_svfiprintf_r+0x1f4>)
 8004b78:	bb1b      	cbnz	r3, 8004bc2 <_svfiprintf_r+0x1b2>
 8004b7a:	9b03      	ldr	r3, [sp, #12]
 8004b7c:	3307      	adds	r3, #7
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	3308      	adds	r3, #8
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b88:	4433      	add	r3, r6
 8004b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8c:	e767      	b.n	8004a5e <_svfiprintf_r+0x4e>
 8004b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b92:	460c      	mov	r4, r1
 8004b94:	2001      	movs	r0, #1
 8004b96:	e7a5      	b.n	8004ae4 <_svfiprintf_r+0xd4>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	3401      	adds	r4, #1
 8004b9c:	9305      	str	r3, [sp, #20]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f04f 0c0a 	mov.w	ip, #10
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004baa:	3a30      	subs	r2, #48	; 0x30
 8004bac:	2a09      	cmp	r2, #9
 8004bae:	d903      	bls.n	8004bb8 <_svfiprintf_r+0x1a8>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0c5      	beq.n	8004b40 <_svfiprintf_r+0x130>
 8004bb4:	9105      	str	r1, [sp, #20]
 8004bb6:	e7c3      	b.n	8004b40 <_svfiprintf_r+0x130>
 8004bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e7f0      	b.n	8004ba4 <_svfiprintf_r+0x194>
 8004bc2:	ab03      	add	r3, sp, #12
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <_svfiprintf_r+0x1f8>)
 8004bca:	a904      	add	r1, sp, #16
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f3af 8000 	nop.w
 8004bd2:	1c42      	adds	r2, r0, #1
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	d1d6      	bne.n	8004b86 <_svfiprintf_r+0x176>
 8004bd8:	89ab      	ldrh	r3, [r5, #12]
 8004bda:	065b      	lsls	r3, r3, #25
 8004bdc:	f53f af2c 	bmi.w	8004a38 <_svfiprintf_r+0x28>
 8004be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be2:	b01d      	add	sp, #116	; 0x74
 8004be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be8:	ab03      	add	r3, sp, #12
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	462a      	mov	r2, r5
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <_svfiprintf_r+0x1f8>)
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f000 f9d4 	bl	8004fa0 <_printf_i>
 8004bf8:	e7eb      	b.n	8004bd2 <_svfiprintf_r+0x1c2>
 8004bfa:	bf00      	nop
 8004bfc:	08005ba2 	.word	0x08005ba2
 8004c00:	08005bac 	.word	0x08005bac
 8004c04:	00000000 	.word	0x00000000
 8004c08:	08004959 	.word	0x08004959
 8004c0c:	08005ba8 	.word	0x08005ba8

08004c10 <__sfputc_r>:
 8004c10:	6893      	ldr	r3, [r2, #8]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	b410      	push	{r4}
 8004c18:	6093      	str	r3, [r2, #8]
 8004c1a:	da08      	bge.n	8004c2e <__sfputc_r+0x1e>
 8004c1c:	6994      	ldr	r4, [r2, #24]
 8004c1e:	42a3      	cmp	r3, r4
 8004c20:	db01      	blt.n	8004c26 <__sfputc_r+0x16>
 8004c22:	290a      	cmp	r1, #10
 8004c24:	d103      	bne.n	8004c2e <__sfputc_r+0x1e>
 8004c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c2a:	f000 baef 	b.w	800520c <__swbuf_r>
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	1c58      	adds	r0, r3, #1
 8004c32:	6010      	str	r0, [r2, #0]
 8004c34:	7019      	strb	r1, [r3, #0]
 8004c36:	4608      	mov	r0, r1
 8004c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <__sfputs_r>:
 8004c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c40:	4606      	mov	r6, r0
 8004c42:	460f      	mov	r7, r1
 8004c44:	4614      	mov	r4, r2
 8004c46:	18d5      	adds	r5, r2, r3
 8004c48:	42ac      	cmp	r4, r5
 8004c4a:	d101      	bne.n	8004c50 <__sfputs_r+0x12>
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e007      	b.n	8004c60 <__sfputs_r+0x22>
 8004c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c54:	463a      	mov	r2, r7
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff ffda 	bl	8004c10 <__sfputc_r>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d1f3      	bne.n	8004c48 <__sfputs_r+0xa>
 8004c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c64 <_vfiprintf_r>:
 8004c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	460d      	mov	r5, r1
 8004c6a:	b09d      	sub	sp, #116	; 0x74
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	4698      	mov	r8, r3
 8004c70:	4606      	mov	r6, r0
 8004c72:	b118      	cbz	r0, 8004c7c <_vfiprintf_r+0x18>
 8004c74:	6983      	ldr	r3, [r0, #24]
 8004c76:	b90b      	cbnz	r3, 8004c7c <_vfiprintf_r+0x18>
 8004c78:	f000 fcaa 	bl	80055d0 <__sinit>
 8004c7c:	4b89      	ldr	r3, [pc, #548]	; (8004ea4 <_vfiprintf_r+0x240>)
 8004c7e:	429d      	cmp	r5, r3
 8004c80:	d11b      	bne.n	8004cba <_vfiprintf_r+0x56>
 8004c82:	6875      	ldr	r5, [r6, #4]
 8004c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c86:	07d9      	lsls	r1, r3, #31
 8004c88:	d405      	bmi.n	8004c96 <_vfiprintf_r+0x32>
 8004c8a:	89ab      	ldrh	r3, [r5, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_vfiprintf_r+0x32>
 8004c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c92:	f000 fd3b 	bl	800570c <__retarget_lock_acquire_recursive>
 8004c96:	89ab      	ldrh	r3, [r5, #12]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	d501      	bpl.n	8004ca0 <_vfiprintf_r+0x3c>
 8004c9c:	692b      	ldr	r3, [r5, #16]
 8004c9e:	b9eb      	cbnz	r3, 8004cdc <_vfiprintf_r+0x78>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f000 fb04 	bl	80052b0 <__swsetup_r>
 8004ca8:	b1c0      	cbz	r0, 8004cdc <_vfiprintf_r+0x78>
 8004caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cac:	07dc      	lsls	r4, r3, #31
 8004cae:	d50e      	bpl.n	8004cce <_vfiprintf_r+0x6a>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	b01d      	add	sp, #116	; 0x74
 8004cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cba:	4b7b      	ldr	r3, [pc, #492]	; (8004ea8 <_vfiprintf_r+0x244>)
 8004cbc:	429d      	cmp	r5, r3
 8004cbe:	d101      	bne.n	8004cc4 <_vfiprintf_r+0x60>
 8004cc0:	68b5      	ldr	r5, [r6, #8]
 8004cc2:	e7df      	b.n	8004c84 <_vfiprintf_r+0x20>
 8004cc4:	4b79      	ldr	r3, [pc, #484]	; (8004eac <_vfiprintf_r+0x248>)
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	bf08      	it	eq
 8004cca:	68f5      	ldreq	r5, [r6, #12]
 8004ccc:	e7da      	b.n	8004c84 <_vfiprintf_r+0x20>
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	0598      	lsls	r0, r3, #22
 8004cd2:	d4ed      	bmi.n	8004cb0 <_vfiprintf_r+0x4c>
 8004cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd6:	f000 fd1a 	bl	800570e <__retarget_lock_release_recursive>
 8004cda:	e7e9      	b.n	8004cb0 <_vfiprintf_r+0x4c>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cea:	2330      	movs	r3, #48	; 0x30
 8004cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004eb0 <_vfiprintf_r+0x24c>
 8004cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cf4:	f04f 0901 	mov.w	r9, #1
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	469a      	mov	sl, r3
 8004cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d00:	b10a      	cbz	r2, 8004d06 <_vfiprintf_r+0xa2>
 8004d02:	2a25      	cmp	r2, #37	; 0x25
 8004d04:	d1f9      	bne.n	8004cfa <_vfiprintf_r+0x96>
 8004d06:	ebba 0b04 	subs.w	fp, sl, r4
 8004d0a:	d00b      	beq.n	8004d24 <_vfiprintf_r+0xc0>
 8004d0c:	465b      	mov	r3, fp
 8004d0e:	4622      	mov	r2, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ff93 	bl	8004c3e <__sfputs_r>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	f000 80aa 	beq.w	8004e72 <_vfiprintf_r+0x20e>
 8004d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d20:	445a      	add	r2, fp
 8004d22:	9209      	str	r2, [sp, #36]	; 0x24
 8004d24:	f89a 3000 	ldrb.w	r3, [sl]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a2 	beq.w	8004e72 <_vfiprintf_r+0x20e>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	9307      	str	r3, [sp, #28]
 8004d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d44:	931a      	str	r3, [sp, #104]	; 0x68
 8004d46:	4654      	mov	r4, sl
 8004d48:	2205      	movs	r2, #5
 8004d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4e:	4858      	ldr	r0, [pc, #352]	; (8004eb0 <_vfiprintf_r+0x24c>)
 8004d50:	f7fb fa6e 	bl	8000230 <memchr>
 8004d54:	9a04      	ldr	r2, [sp, #16]
 8004d56:	b9d8      	cbnz	r0, 8004d90 <_vfiprintf_r+0x12c>
 8004d58:	06d1      	lsls	r1, r2, #27
 8004d5a:	bf44      	itt	mi
 8004d5c:	2320      	movmi	r3, #32
 8004d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d62:	0713      	lsls	r3, r2, #28
 8004d64:	bf44      	itt	mi
 8004d66:	232b      	movmi	r3, #43	; 0x2b
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d70:	2b2a      	cmp	r3, #42	; 0x2a
 8004d72:	d015      	beq.n	8004da0 <_vfiprintf_r+0x13c>
 8004d74:	9a07      	ldr	r2, [sp, #28]
 8004d76:	4654      	mov	r4, sl
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d84:	3b30      	subs	r3, #48	; 0x30
 8004d86:	2b09      	cmp	r3, #9
 8004d88:	d94e      	bls.n	8004e28 <_vfiprintf_r+0x1c4>
 8004d8a:	b1b0      	cbz	r0, 8004dba <_vfiprintf_r+0x156>
 8004d8c:	9207      	str	r2, [sp, #28]
 8004d8e:	e014      	b.n	8004dba <_vfiprintf_r+0x156>
 8004d90:	eba0 0308 	sub.w	r3, r0, r8
 8004d94:	fa09 f303 	lsl.w	r3, r9, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	46a2      	mov	sl, r4
 8004d9e:	e7d2      	b.n	8004d46 <_vfiprintf_r+0xe2>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	1d19      	adds	r1, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	9103      	str	r1, [sp, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bfbb      	ittet	lt
 8004dac:	425b      	neglt	r3, r3
 8004dae:	f042 0202 	orrlt.w	r2, r2, #2
 8004db2:	9307      	strge	r3, [sp, #28]
 8004db4:	9307      	strlt	r3, [sp, #28]
 8004db6:	bfb8      	it	lt
 8004db8:	9204      	strlt	r2, [sp, #16]
 8004dba:	7823      	ldrb	r3, [r4, #0]
 8004dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8004dbe:	d10c      	bne.n	8004dda <_vfiprintf_r+0x176>
 8004dc0:	7863      	ldrb	r3, [r4, #1]
 8004dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc4:	d135      	bne.n	8004e32 <_vfiprintf_r+0x1ce>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	1d1a      	adds	r2, r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	9203      	str	r2, [sp, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dd6:	3402      	adds	r4, #2
 8004dd8:	9305      	str	r3, [sp, #20]
 8004dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ec0 <_vfiprintf_r+0x25c>
 8004dde:	7821      	ldrb	r1, [r4, #0]
 8004de0:	2203      	movs	r2, #3
 8004de2:	4650      	mov	r0, sl
 8004de4:	f7fb fa24 	bl	8000230 <memchr>
 8004de8:	b140      	cbz	r0, 8004dfc <_vfiprintf_r+0x198>
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	eba0 000a 	sub.w	r0, r0, sl
 8004df0:	fa03 f000 	lsl.w	r0, r3, r0
 8004df4:	9b04      	ldr	r3, [sp, #16]
 8004df6:	4303      	orrs	r3, r0
 8004df8:	3401      	adds	r4, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e00:	482c      	ldr	r0, [pc, #176]	; (8004eb4 <_vfiprintf_r+0x250>)
 8004e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e06:	2206      	movs	r2, #6
 8004e08:	f7fb fa12 	bl	8000230 <memchr>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d03f      	beq.n	8004e90 <_vfiprintf_r+0x22c>
 8004e10:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <_vfiprintf_r+0x254>)
 8004e12:	bb1b      	cbnz	r3, 8004e5c <_vfiprintf_r+0x1f8>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	3307      	adds	r3, #7
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	443b      	add	r3, r7
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	e767      	b.n	8004cf8 <_vfiprintf_r+0x94>
 8004e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e7a5      	b.n	8004d7e <_vfiprintf_r+0x11a>
 8004e32:	2300      	movs	r3, #0
 8004e34:	3401      	adds	r4, #1
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f04f 0c0a 	mov.w	ip, #10
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e44:	3a30      	subs	r2, #48	; 0x30
 8004e46:	2a09      	cmp	r2, #9
 8004e48:	d903      	bls.n	8004e52 <_vfiprintf_r+0x1ee>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c5      	beq.n	8004dda <_vfiprintf_r+0x176>
 8004e4e:	9105      	str	r1, [sp, #20]
 8004e50:	e7c3      	b.n	8004dda <_vfiprintf_r+0x176>
 8004e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e56:	4604      	mov	r4, r0
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e7f0      	b.n	8004e3e <_vfiprintf_r+0x1da>
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <_vfiprintf_r+0x258>)
 8004e64:	a904      	add	r1, sp, #16
 8004e66:	4630      	mov	r0, r6
 8004e68:	f3af 8000 	nop.w
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	1c78      	adds	r0, r7, #1
 8004e70:	d1d6      	bne.n	8004e20 <_vfiprintf_r+0x1bc>
 8004e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e74:	07d9      	lsls	r1, r3, #31
 8004e76:	d405      	bmi.n	8004e84 <_vfiprintf_r+0x220>
 8004e78:	89ab      	ldrh	r3, [r5, #12]
 8004e7a:	059a      	lsls	r2, r3, #22
 8004e7c:	d402      	bmi.n	8004e84 <_vfiprintf_r+0x220>
 8004e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e80:	f000 fc45 	bl	800570e <__retarget_lock_release_recursive>
 8004e84:	89ab      	ldrh	r3, [r5, #12]
 8004e86:	065b      	lsls	r3, r3, #25
 8004e88:	f53f af12 	bmi.w	8004cb0 <_vfiprintf_r+0x4c>
 8004e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e8e:	e711      	b.n	8004cb4 <_vfiprintf_r+0x50>
 8004e90:	ab03      	add	r3, sp, #12
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	462a      	mov	r2, r5
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <_vfiprintf_r+0x258>)
 8004e98:	a904      	add	r1, sp, #16
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f880 	bl	8004fa0 <_printf_i>
 8004ea0:	e7e4      	b.n	8004e6c <_vfiprintf_r+0x208>
 8004ea2:	bf00      	nop
 8004ea4:	08005bf8 	.word	0x08005bf8
 8004ea8:	08005c18 	.word	0x08005c18
 8004eac:	08005bd8 	.word	0x08005bd8
 8004eb0:	08005ba2 	.word	0x08005ba2
 8004eb4:	08005bac 	.word	0x08005bac
 8004eb8:	00000000 	.word	0x00000000
 8004ebc:	08004c3f 	.word	0x08004c3f
 8004ec0:	08005ba8 	.word	0x08005ba8

08004ec4 <_printf_common>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	4616      	mov	r6, r2
 8004eca:	4699      	mov	r9, r3
 8004ecc:	688a      	ldr	r2, [r1, #8]
 8004ece:	690b      	ldr	r3, [r1, #16]
 8004ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bfb8      	it	lt
 8004ed8:	4613      	movlt	r3, r2
 8004eda:	6033      	str	r3, [r6, #0]
 8004edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	b10a      	cbz	r2, 8004eea <_printf_common+0x26>
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	6033      	str	r3, [r6, #0]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	0699      	lsls	r1, r3, #26
 8004eee:	bf42      	ittt	mi
 8004ef0:	6833      	ldrmi	r3, [r6, #0]
 8004ef2:	3302      	addmi	r3, #2
 8004ef4:	6033      	strmi	r3, [r6, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	f015 0506 	ands.w	r5, r5, #6
 8004efc:	d106      	bne.n	8004f0c <_printf_common+0x48>
 8004efe:	f104 0a19 	add.w	sl, r4, #25
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	6832      	ldr	r2, [r6, #0]
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	dc26      	bgt.n	8004f5a <_printf_common+0x96>
 8004f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f10:	1e13      	subs	r3, r2, #0
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	bf18      	it	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	0692      	lsls	r2, r2, #26
 8004f1a:	d42b      	bmi.n	8004f74 <_printf_common+0xb0>
 8004f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f20:	4649      	mov	r1, r9
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	3001      	adds	r0, #1
 8004f28:	d01e      	beq.n	8004f68 <_printf_common+0xa4>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	68e5      	ldr	r5, [r4, #12]
 8004f2e:	6832      	ldr	r2, [r6, #0]
 8004f30:	f003 0306 	and.w	r3, r3, #6
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	bf08      	it	eq
 8004f38:	1aad      	subeq	r5, r5, r2
 8004f3a:	68a3      	ldr	r3, [r4, #8]
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	bf0c      	ite	eq
 8004f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f44:	2500      	movne	r5, #0
 8004f46:	4293      	cmp	r3, r2
 8004f48:	bfc4      	itt	gt
 8004f4a:	1a9b      	subgt	r3, r3, r2
 8004f4c:	18ed      	addgt	r5, r5, r3
 8004f4e:	2600      	movs	r6, #0
 8004f50:	341a      	adds	r4, #26
 8004f52:	42b5      	cmp	r5, r6
 8004f54:	d11a      	bne.n	8004f8c <_printf_common+0xc8>
 8004f56:	2000      	movs	r0, #0
 8004f58:	e008      	b.n	8004f6c <_printf_common+0xa8>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4652      	mov	r2, sl
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4638      	mov	r0, r7
 8004f62:	47c0      	blx	r8
 8004f64:	3001      	adds	r0, #1
 8004f66:	d103      	bne.n	8004f70 <_printf_common+0xac>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f70:	3501      	adds	r5, #1
 8004f72:	e7c6      	b.n	8004f02 <_printf_common+0x3e>
 8004f74:	18e1      	adds	r1, r4, r3
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	2030      	movs	r0, #48	; 0x30
 8004f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f7e:	4422      	add	r2, r4
 8004f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f88:	3302      	adds	r3, #2
 8004f8a:	e7c7      	b.n	8004f1c <_printf_common+0x58>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4622      	mov	r2, r4
 8004f90:	4649      	mov	r1, r9
 8004f92:	4638      	mov	r0, r7
 8004f94:	47c0      	blx	r8
 8004f96:	3001      	adds	r0, #1
 8004f98:	d0e6      	beq.n	8004f68 <_printf_common+0xa4>
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7d9      	b.n	8004f52 <_printf_common+0x8e>
	...

08004fa0 <_printf_i>:
 8004fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	7e0f      	ldrb	r7, [r1, #24]
 8004fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fa8:	2f78      	cmp	r7, #120	; 0x78
 8004faa:	4691      	mov	r9, r2
 8004fac:	4680      	mov	r8, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	469a      	mov	sl, r3
 8004fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fb6:	d807      	bhi.n	8004fc8 <_printf_i+0x28>
 8004fb8:	2f62      	cmp	r7, #98	; 0x62
 8004fba:	d80a      	bhi.n	8004fd2 <_printf_i+0x32>
 8004fbc:	2f00      	cmp	r7, #0
 8004fbe:	f000 80d8 	beq.w	8005172 <_printf_i+0x1d2>
 8004fc2:	2f58      	cmp	r7, #88	; 0x58
 8004fc4:	f000 80a3 	beq.w	800510e <_printf_i+0x16e>
 8004fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fd0:	e03a      	b.n	8005048 <_printf_i+0xa8>
 8004fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fd6:	2b15      	cmp	r3, #21
 8004fd8:	d8f6      	bhi.n	8004fc8 <_printf_i+0x28>
 8004fda:	a101      	add	r1, pc, #4	; (adr r1, 8004fe0 <_printf_i+0x40>)
 8004fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe0:	08005039 	.word	0x08005039
 8004fe4:	0800504d 	.word	0x0800504d
 8004fe8:	08004fc9 	.word	0x08004fc9
 8004fec:	08004fc9 	.word	0x08004fc9
 8004ff0:	08004fc9 	.word	0x08004fc9
 8004ff4:	08004fc9 	.word	0x08004fc9
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	08004fc9 	.word	0x08004fc9
 8005000:	08004fc9 	.word	0x08004fc9
 8005004:	08004fc9 	.word	0x08004fc9
 8005008:	08004fc9 	.word	0x08004fc9
 800500c:	08005159 	.word	0x08005159
 8005010:	0800507d 	.word	0x0800507d
 8005014:	0800513b 	.word	0x0800513b
 8005018:	08004fc9 	.word	0x08004fc9
 800501c:	08004fc9 	.word	0x08004fc9
 8005020:	0800517b 	.word	0x0800517b
 8005024:	08004fc9 	.word	0x08004fc9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004fc9 	.word	0x08004fc9
 8005030:	08004fc9 	.word	0x08004fc9
 8005034:	08005143 	.word	0x08005143
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	602a      	str	r2, [r5, #0]
 8005040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005048:	2301      	movs	r3, #1
 800504a:	e0a3      	b.n	8005194 <_printf_i+0x1f4>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	6829      	ldr	r1, [r5, #0]
 8005050:	0606      	lsls	r6, r0, #24
 8005052:	f101 0304 	add.w	r3, r1, #4
 8005056:	d50a      	bpl.n	800506e <_printf_i+0xce>
 8005058:	680e      	ldr	r6, [r1, #0]
 800505a:	602b      	str	r3, [r5, #0]
 800505c:	2e00      	cmp	r6, #0
 800505e:	da03      	bge.n	8005068 <_printf_i+0xc8>
 8005060:	232d      	movs	r3, #45	; 0x2d
 8005062:	4276      	negs	r6, r6
 8005064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005068:	485e      	ldr	r0, [pc, #376]	; (80051e4 <_printf_i+0x244>)
 800506a:	230a      	movs	r3, #10
 800506c:	e019      	b.n	80050a2 <_printf_i+0x102>
 800506e:	680e      	ldr	r6, [r1, #0]
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005076:	bf18      	it	ne
 8005078:	b236      	sxthne	r6, r6
 800507a:	e7ef      	b.n	800505c <_printf_i+0xbc>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6029      	str	r1, [r5, #0]
 8005084:	0601      	lsls	r1, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xec>
 8005088:	681e      	ldr	r6, [r3, #0]
 800508a:	e002      	b.n	8005092 <_printf_i+0xf2>
 800508c:	0646      	lsls	r6, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xe8>
 8005090:	881e      	ldrh	r6, [r3, #0]
 8005092:	4854      	ldr	r0, [pc, #336]	; (80051e4 <_printf_i+0x244>)
 8005094:	2f6f      	cmp	r7, #111	; 0x6f
 8005096:	bf0c      	ite	eq
 8005098:	2308      	moveq	r3, #8
 800509a:	230a      	movne	r3, #10
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050a2:	6865      	ldr	r5, [r4, #4]
 80050a4:	60a5      	str	r5, [r4, #8]
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	bfa2      	ittt	ge
 80050aa:	6821      	ldrge	r1, [r4, #0]
 80050ac:	f021 0104 	bicge.w	r1, r1, #4
 80050b0:	6021      	strge	r1, [r4, #0]
 80050b2:	b90e      	cbnz	r6, 80050b8 <_printf_i+0x118>
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	d04d      	beq.n	8005154 <_printf_i+0x1b4>
 80050b8:	4615      	mov	r5, r2
 80050ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80050be:	fb03 6711 	mls	r7, r3, r1, r6
 80050c2:	5dc7      	ldrb	r7, [r0, r7]
 80050c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c8:	4637      	mov	r7, r6
 80050ca:	42bb      	cmp	r3, r7
 80050cc:	460e      	mov	r6, r1
 80050ce:	d9f4      	bls.n	80050ba <_printf_i+0x11a>
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d10b      	bne.n	80050ec <_printf_i+0x14c>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	07de      	lsls	r6, r3, #31
 80050d8:	d508      	bpl.n	80050ec <_printf_i+0x14c>
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	6861      	ldr	r1, [r4, #4]
 80050de:	4299      	cmp	r1, r3
 80050e0:	bfde      	ittt	le
 80050e2:	2330      	movle	r3, #48	; 0x30
 80050e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ec:	1b52      	subs	r2, r2, r5
 80050ee:	6122      	str	r2, [r4, #16]
 80050f0:	f8cd a000 	str.w	sl, [sp]
 80050f4:	464b      	mov	r3, r9
 80050f6:	aa03      	add	r2, sp, #12
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fee2 	bl	8004ec4 <_printf_common>
 8005100:	3001      	adds	r0, #1
 8005102:	d14c      	bne.n	800519e <_printf_i+0x1fe>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b004      	add	sp, #16
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510e:	4835      	ldr	r0, [pc, #212]	; (80051e4 <_printf_i+0x244>)
 8005110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005114:	6829      	ldr	r1, [r5, #0]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f851 6b04 	ldr.w	r6, [r1], #4
 800511c:	6029      	str	r1, [r5, #0]
 800511e:	061d      	lsls	r5, r3, #24
 8005120:	d514      	bpl.n	800514c <_printf_i+0x1ac>
 8005122:	07df      	lsls	r7, r3, #31
 8005124:	bf44      	itt	mi
 8005126:	f043 0320 	orrmi.w	r3, r3, #32
 800512a:	6023      	strmi	r3, [r4, #0]
 800512c:	b91e      	cbnz	r6, 8005136 <_printf_i+0x196>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f023 0320 	bic.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	2310      	movs	r3, #16
 8005138:	e7b0      	b.n	800509c <_printf_i+0xfc>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f043 0320 	orr.w	r3, r3, #32
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	2378      	movs	r3, #120	; 0x78
 8005144:	4828      	ldr	r0, [pc, #160]	; (80051e8 <_printf_i+0x248>)
 8005146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800514a:	e7e3      	b.n	8005114 <_printf_i+0x174>
 800514c:	0659      	lsls	r1, r3, #25
 800514e:	bf48      	it	mi
 8005150:	b2b6      	uxthmi	r6, r6
 8005152:	e7e6      	b.n	8005122 <_printf_i+0x182>
 8005154:	4615      	mov	r5, r2
 8005156:	e7bb      	b.n	80050d0 <_printf_i+0x130>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	6826      	ldr	r6, [r4, #0]
 800515c:	6961      	ldr	r1, [r4, #20]
 800515e:	1d18      	adds	r0, r3, #4
 8005160:	6028      	str	r0, [r5, #0]
 8005162:	0635      	lsls	r5, r6, #24
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	d501      	bpl.n	800516c <_printf_i+0x1cc>
 8005168:	6019      	str	r1, [r3, #0]
 800516a:	e002      	b.n	8005172 <_printf_i+0x1d2>
 800516c:	0670      	lsls	r0, r6, #25
 800516e:	d5fb      	bpl.n	8005168 <_printf_i+0x1c8>
 8005170:	8019      	strh	r1, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	4615      	mov	r5, r2
 8005178:	e7ba      	b.n	80050f0 <_printf_i+0x150>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	602a      	str	r2, [r5, #0]
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	6862      	ldr	r2, [r4, #4]
 8005184:	2100      	movs	r1, #0
 8005186:	4628      	mov	r0, r5
 8005188:	f7fb f852 	bl	8000230 <memchr>
 800518c:	b108      	cbz	r0, 8005192 <_printf_i+0x1f2>
 800518e:	1b40      	subs	r0, r0, r5
 8005190:	6060      	str	r0, [r4, #4]
 8005192:	6863      	ldr	r3, [r4, #4]
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	2300      	movs	r3, #0
 8005198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519c:	e7a8      	b.n	80050f0 <_printf_i+0x150>
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	462a      	mov	r2, r5
 80051a2:	4649      	mov	r1, r9
 80051a4:	4640      	mov	r0, r8
 80051a6:	47d0      	blx	sl
 80051a8:	3001      	adds	r0, #1
 80051aa:	d0ab      	beq.n	8005104 <_printf_i+0x164>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	079b      	lsls	r3, r3, #30
 80051b0:	d413      	bmi.n	80051da <_printf_i+0x23a>
 80051b2:	68e0      	ldr	r0, [r4, #12]
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	4298      	cmp	r0, r3
 80051b8:	bfb8      	it	lt
 80051ba:	4618      	movlt	r0, r3
 80051bc:	e7a4      	b.n	8005108 <_printf_i+0x168>
 80051be:	2301      	movs	r3, #1
 80051c0:	4632      	mov	r2, r6
 80051c2:	4649      	mov	r1, r9
 80051c4:	4640      	mov	r0, r8
 80051c6:	47d0      	blx	sl
 80051c8:	3001      	adds	r0, #1
 80051ca:	d09b      	beq.n	8005104 <_printf_i+0x164>
 80051cc:	3501      	adds	r5, #1
 80051ce:	68e3      	ldr	r3, [r4, #12]
 80051d0:	9903      	ldr	r1, [sp, #12]
 80051d2:	1a5b      	subs	r3, r3, r1
 80051d4:	42ab      	cmp	r3, r5
 80051d6:	dcf2      	bgt.n	80051be <_printf_i+0x21e>
 80051d8:	e7eb      	b.n	80051b2 <_printf_i+0x212>
 80051da:	2500      	movs	r5, #0
 80051dc:	f104 0619 	add.w	r6, r4, #25
 80051e0:	e7f5      	b.n	80051ce <_printf_i+0x22e>
 80051e2:	bf00      	nop
 80051e4:	08005bb3 	.word	0x08005bb3
 80051e8:	08005bc4 	.word	0x08005bc4

080051ec <_sbrk_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d06      	ldr	r5, [pc, #24]	; (8005208 <_sbrk_r+0x1c>)
 80051f0:	2300      	movs	r3, #0
 80051f2:	4604      	mov	r4, r0
 80051f4:	4608      	mov	r0, r1
 80051f6:	602b      	str	r3, [r5, #0]
 80051f8:	f7fb fd12 	bl	8000c20 <_sbrk>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_sbrk_r+0x1a>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_sbrk_r+0x1a>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000290 	.word	0x20000290

0800520c <__swbuf_r>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	460e      	mov	r6, r1
 8005210:	4614      	mov	r4, r2
 8005212:	4605      	mov	r5, r0
 8005214:	b118      	cbz	r0, 800521e <__swbuf_r+0x12>
 8005216:	6983      	ldr	r3, [r0, #24]
 8005218:	b90b      	cbnz	r3, 800521e <__swbuf_r+0x12>
 800521a:	f000 f9d9 	bl	80055d0 <__sinit>
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <__swbuf_r+0x98>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d12b      	bne.n	800527c <__swbuf_r+0x70>
 8005224:	686c      	ldr	r4, [r5, #4]
 8005226:	69a3      	ldr	r3, [r4, #24]
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	071a      	lsls	r2, r3, #28
 800522e:	d52f      	bpl.n	8005290 <__swbuf_r+0x84>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	b36b      	cbz	r3, 8005290 <__swbuf_r+0x84>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	1ac0      	subs	r0, r0, r3
 800523a:	6963      	ldr	r3, [r4, #20]
 800523c:	b2f6      	uxtb	r6, r6
 800523e:	4283      	cmp	r3, r0
 8005240:	4637      	mov	r7, r6
 8005242:	dc04      	bgt.n	800524e <__swbuf_r+0x42>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f92e 	bl	80054a8 <_fflush_r>
 800524c:	bb30      	cbnz	r0, 800529c <__swbuf_r+0x90>
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	3b01      	subs	r3, #1
 8005252:	60a3      	str	r3, [r4, #8]
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	701e      	strb	r6, [r3, #0]
 800525c:	6963      	ldr	r3, [r4, #20]
 800525e:	3001      	adds	r0, #1
 8005260:	4283      	cmp	r3, r0
 8005262:	d004      	beq.n	800526e <__swbuf_r+0x62>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	07db      	lsls	r3, r3, #31
 8005268:	d506      	bpl.n	8005278 <__swbuf_r+0x6c>
 800526a:	2e0a      	cmp	r6, #10
 800526c:	d104      	bne.n	8005278 <__swbuf_r+0x6c>
 800526e:	4621      	mov	r1, r4
 8005270:	4628      	mov	r0, r5
 8005272:	f000 f919 	bl	80054a8 <_fflush_r>
 8005276:	b988      	cbnz	r0, 800529c <__swbuf_r+0x90>
 8005278:	4638      	mov	r0, r7
 800527a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <__swbuf_r+0x9c>)
 800527e:	429c      	cmp	r4, r3
 8005280:	d101      	bne.n	8005286 <__swbuf_r+0x7a>
 8005282:	68ac      	ldr	r4, [r5, #8]
 8005284:	e7cf      	b.n	8005226 <__swbuf_r+0x1a>
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <__swbuf_r+0xa0>)
 8005288:	429c      	cmp	r4, r3
 800528a:	bf08      	it	eq
 800528c:	68ec      	ldreq	r4, [r5, #12]
 800528e:	e7ca      	b.n	8005226 <__swbuf_r+0x1a>
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f80c 	bl	80052b0 <__swsetup_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	d0cb      	beq.n	8005234 <__swbuf_r+0x28>
 800529c:	f04f 37ff 	mov.w	r7, #4294967295
 80052a0:	e7ea      	b.n	8005278 <__swbuf_r+0x6c>
 80052a2:	bf00      	nop
 80052a4:	08005bf8 	.word	0x08005bf8
 80052a8:	08005c18 	.word	0x08005c18
 80052ac:	08005bd8 	.word	0x08005bd8

080052b0 <__swsetup_r>:
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <__swsetup_r+0xcc>)
 80052b2:	b570      	push	{r4, r5, r6, lr}
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	4606      	mov	r6, r0
 80052b8:	460c      	mov	r4, r1
 80052ba:	b125      	cbz	r5, 80052c6 <__swsetup_r+0x16>
 80052bc:	69ab      	ldr	r3, [r5, #24]
 80052be:	b913      	cbnz	r3, 80052c6 <__swsetup_r+0x16>
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f985 	bl	80055d0 <__sinit>
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <__swsetup_r+0xd0>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	d10f      	bne.n	80052ec <__swsetup_r+0x3c>
 80052cc:	686c      	ldr	r4, [r5, #4]
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052d4:	0719      	lsls	r1, r3, #28
 80052d6:	d42c      	bmi.n	8005332 <__swsetup_r+0x82>
 80052d8:	06dd      	lsls	r5, r3, #27
 80052da:	d411      	bmi.n	8005300 <__swsetup_r+0x50>
 80052dc:	2309      	movs	r3, #9
 80052de:	6033      	str	r3, [r6, #0]
 80052e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	e03e      	b.n	800536a <__swsetup_r+0xba>
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <__swsetup_r+0xd4>)
 80052ee:	429c      	cmp	r4, r3
 80052f0:	d101      	bne.n	80052f6 <__swsetup_r+0x46>
 80052f2:	68ac      	ldr	r4, [r5, #8]
 80052f4:	e7eb      	b.n	80052ce <__swsetup_r+0x1e>
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <__swsetup_r+0xd8>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	bf08      	it	eq
 80052fc:	68ec      	ldreq	r4, [r5, #12]
 80052fe:	e7e6      	b.n	80052ce <__swsetup_r+0x1e>
 8005300:	0758      	lsls	r0, r3, #29
 8005302:	d512      	bpl.n	800532a <__swsetup_r+0x7a>
 8005304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005306:	b141      	cbz	r1, 800531a <__swsetup_r+0x6a>
 8005308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800530c:	4299      	cmp	r1, r3
 800530e:	d002      	beq.n	8005316 <__swsetup_r+0x66>
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff fa41 	bl	8004798 <_free_r>
 8005316:	2300      	movs	r3, #0
 8005318:	6363      	str	r3, [r4, #52]	; 0x34
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	2300      	movs	r3, #0
 8005324:	6063      	str	r3, [r4, #4]
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f043 0308 	orr.w	r3, r3, #8
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	b94b      	cbnz	r3, 800534a <__swsetup_r+0x9a>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800533c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005340:	d003      	beq.n	800534a <__swsetup_r+0x9a>
 8005342:	4621      	mov	r1, r4
 8005344:	4630      	mov	r0, r6
 8005346:	f000 fa09 	bl	800575c <__smakebuf_r>
 800534a:	89a0      	ldrh	r0, [r4, #12]
 800534c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005350:	f010 0301 	ands.w	r3, r0, #1
 8005354:	d00a      	beq.n	800536c <__swsetup_r+0xbc>
 8005356:	2300      	movs	r3, #0
 8005358:	60a3      	str	r3, [r4, #8]
 800535a:	6963      	ldr	r3, [r4, #20]
 800535c:	425b      	negs	r3, r3
 800535e:	61a3      	str	r3, [r4, #24]
 8005360:	6923      	ldr	r3, [r4, #16]
 8005362:	b943      	cbnz	r3, 8005376 <__swsetup_r+0xc6>
 8005364:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005368:	d1ba      	bne.n	80052e0 <__swsetup_r+0x30>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	0781      	lsls	r1, r0, #30
 800536e:	bf58      	it	pl
 8005370:	6963      	ldrpl	r3, [r4, #20]
 8005372:	60a3      	str	r3, [r4, #8]
 8005374:	e7f4      	b.n	8005360 <__swsetup_r+0xb0>
 8005376:	2000      	movs	r0, #0
 8005378:	e7f7      	b.n	800536a <__swsetup_r+0xba>
 800537a:	bf00      	nop
 800537c:	2000000c 	.word	0x2000000c
 8005380:	08005bf8 	.word	0x08005bf8
 8005384:	08005c18 	.word	0x08005c18
 8005388:	08005bd8 	.word	0x08005bd8

0800538c <abort>:
 800538c:	b508      	push	{r3, lr}
 800538e:	2006      	movs	r0, #6
 8005390:	f000 fab0 	bl	80058f4 <raise>
 8005394:	2001      	movs	r0, #1
 8005396:	f7fb fbcb 	bl	8000b30 <_exit>
	...

0800539c <__sflush_r>:
 800539c:	898a      	ldrh	r2, [r1, #12]
 800539e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a2:	4605      	mov	r5, r0
 80053a4:	0710      	lsls	r0, r2, #28
 80053a6:	460c      	mov	r4, r1
 80053a8:	d458      	bmi.n	800545c <__sflush_r+0xc0>
 80053aa:	684b      	ldr	r3, [r1, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	dc05      	bgt.n	80053bc <__sflush_r+0x20>
 80053b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dc02      	bgt.n	80053bc <__sflush_r+0x20>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053be:	2e00      	cmp	r6, #0
 80053c0:	d0f9      	beq.n	80053b6 <__sflush_r+0x1a>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053c8:	682f      	ldr	r7, [r5, #0]
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	d032      	beq.n	8005434 <__sflush_r+0x98>
 80053ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	075a      	lsls	r2, r3, #29
 80053d4:	d505      	bpl.n	80053e2 <__sflush_r+0x46>
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	1ac0      	subs	r0, r0, r3
 80053da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053dc:	b10b      	cbz	r3, 80053e2 <__sflush_r+0x46>
 80053de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e0:	1ac0      	subs	r0, r0, r3
 80053e2:	2300      	movs	r3, #0
 80053e4:	4602      	mov	r2, r0
 80053e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053e8:	6a21      	ldr	r1, [r4, #32]
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b0      	blx	r6
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	d106      	bne.n	8005402 <__sflush_r+0x66>
 80053f4:	6829      	ldr	r1, [r5, #0]
 80053f6:	291d      	cmp	r1, #29
 80053f8:	d82c      	bhi.n	8005454 <__sflush_r+0xb8>
 80053fa:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <__sflush_r+0x108>)
 80053fc:	40ca      	lsrs	r2, r1
 80053fe:	07d6      	lsls	r6, r2, #31
 8005400:	d528      	bpl.n	8005454 <__sflush_r+0xb8>
 8005402:	2200      	movs	r2, #0
 8005404:	6062      	str	r2, [r4, #4]
 8005406:	04d9      	lsls	r1, r3, #19
 8005408:	6922      	ldr	r2, [r4, #16]
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	d504      	bpl.n	8005418 <__sflush_r+0x7c>
 800540e:	1c42      	adds	r2, r0, #1
 8005410:	d101      	bne.n	8005416 <__sflush_r+0x7a>
 8005412:	682b      	ldr	r3, [r5, #0]
 8005414:	b903      	cbnz	r3, 8005418 <__sflush_r+0x7c>
 8005416:	6560      	str	r0, [r4, #84]	; 0x54
 8005418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541a:	602f      	str	r7, [r5, #0]
 800541c:	2900      	cmp	r1, #0
 800541e:	d0ca      	beq.n	80053b6 <__sflush_r+0x1a>
 8005420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005424:	4299      	cmp	r1, r3
 8005426:	d002      	beq.n	800542e <__sflush_r+0x92>
 8005428:	4628      	mov	r0, r5
 800542a:	f7ff f9b5 	bl	8004798 <_free_r>
 800542e:	2000      	movs	r0, #0
 8005430:	6360      	str	r0, [r4, #52]	; 0x34
 8005432:	e7c1      	b.n	80053b8 <__sflush_r+0x1c>
 8005434:	6a21      	ldr	r1, [r4, #32]
 8005436:	2301      	movs	r3, #1
 8005438:	4628      	mov	r0, r5
 800543a:	47b0      	blx	r6
 800543c:	1c41      	adds	r1, r0, #1
 800543e:	d1c7      	bne.n	80053d0 <__sflush_r+0x34>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0c4      	beq.n	80053d0 <__sflush_r+0x34>
 8005446:	2b1d      	cmp	r3, #29
 8005448:	d001      	beq.n	800544e <__sflush_r+0xb2>
 800544a:	2b16      	cmp	r3, #22
 800544c:	d101      	bne.n	8005452 <__sflush_r+0xb6>
 800544e:	602f      	str	r7, [r5, #0]
 8005450:	e7b1      	b.n	80053b6 <__sflush_r+0x1a>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	e7ad      	b.n	80053b8 <__sflush_r+0x1c>
 800545c:	690f      	ldr	r7, [r1, #16]
 800545e:	2f00      	cmp	r7, #0
 8005460:	d0a9      	beq.n	80053b6 <__sflush_r+0x1a>
 8005462:	0793      	lsls	r3, r2, #30
 8005464:	680e      	ldr	r6, [r1, #0]
 8005466:	bf08      	it	eq
 8005468:	694b      	ldreq	r3, [r1, #20]
 800546a:	600f      	str	r7, [r1, #0]
 800546c:	bf18      	it	ne
 800546e:	2300      	movne	r3, #0
 8005470:	eba6 0807 	sub.w	r8, r6, r7
 8005474:	608b      	str	r3, [r1, #8]
 8005476:	f1b8 0f00 	cmp.w	r8, #0
 800547a:	dd9c      	ble.n	80053b6 <__sflush_r+0x1a>
 800547c:	6a21      	ldr	r1, [r4, #32]
 800547e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005480:	4643      	mov	r3, r8
 8005482:	463a      	mov	r2, r7
 8005484:	4628      	mov	r0, r5
 8005486:	47b0      	blx	r6
 8005488:	2800      	cmp	r0, #0
 800548a:	dc06      	bgt.n	800549a <__sflush_r+0xfe>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e78e      	b.n	80053b8 <__sflush_r+0x1c>
 800549a:	4407      	add	r7, r0
 800549c:	eba8 0800 	sub.w	r8, r8, r0
 80054a0:	e7e9      	b.n	8005476 <__sflush_r+0xda>
 80054a2:	bf00      	nop
 80054a4:	20400001 	.word	0x20400001

080054a8 <_fflush_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	690b      	ldr	r3, [r1, #16]
 80054ac:	4605      	mov	r5, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	b913      	cbnz	r3, 80054b8 <_fflush_r+0x10>
 80054b2:	2500      	movs	r5, #0
 80054b4:	4628      	mov	r0, r5
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	b118      	cbz	r0, 80054c2 <_fflush_r+0x1a>
 80054ba:	6983      	ldr	r3, [r0, #24]
 80054bc:	b90b      	cbnz	r3, 80054c2 <_fflush_r+0x1a>
 80054be:	f000 f887 	bl	80055d0 <__sinit>
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <_fflush_r+0x6c>)
 80054c4:	429c      	cmp	r4, r3
 80054c6:	d11b      	bne.n	8005500 <_fflush_r+0x58>
 80054c8:	686c      	ldr	r4, [r5, #4]
 80054ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ef      	beq.n	80054b2 <_fflush_r+0xa>
 80054d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054d4:	07d0      	lsls	r0, r2, #31
 80054d6:	d404      	bmi.n	80054e2 <_fflush_r+0x3a>
 80054d8:	0599      	lsls	r1, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_fflush_r+0x3a>
 80054dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054de:	f000 f915 	bl	800570c <__retarget_lock_acquire_recursive>
 80054e2:	4628      	mov	r0, r5
 80054e4:	4621      	mov	r1, r4
 80054e6:	f7ff ff59 	bl	800539c <__sflush_r>
 80054ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ec:	07da      	lsls	r2, r3, #31
 80054ee:	4605      	mov	r5, r0
 80054f0:	d4e0      	bmi.n	80054b4 <_fflush_r+0xc>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	059b      	lsls	r3, r3, #22
 80054f6:	d4dd      	bmi.n	80054b4 <_fflush_r+0xc>
 80054f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054fa:	f000 f908 	bl	800570e <__retarget_lock_release_recursive>
 80054fe:	e7d9      	b.n	80054b4 <_fflush_r+0xc>
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <_fflush_r+0x70>)
 8005502:	429c      	cmp	r4, r3
 8005504:	d101      	bne.n	800550a <_fflush_r+0x62>
 8005506:	68ac      	ldr	r4, [r5, #8]
 8005508:	e7df      	b.n	80054ca <_fflush_r+0x22>
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <_fflush_r+0x74>)
 800550c:	429c      	cmp	r4, r3
 800550e:	bf08      	it	eq
 8005510:	68ec      	ldreq	r4, [r5, #12]
 8005512:	e7da      	b.n	80054ca <_fflush_r+0x22>
 8005514:	08005bf8 	.word	0x08005bf8
 8005518:	08005c18 	.word	0x08005c18
 800551c:	08005bd8 	.word	0x08005bd8

08005520 <std>:
 8005520:	2300      	movs	r3, #0
 8005522:	b510      	push	{r4, lr}
 8005524:	4604      	mov	r4, r0
 8005526:	e9c0 3300 	strd	r3, r3, [r0]
 800552a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800552e:	6083      	str	r3, [r0, #8]
 8005530:	8181      	strh	r1, [r0, #12]
 8005532:	6643      	str	r3, [r0, #100]	; 0x64
 8005534:	81c2      	strh	r2, [r0, #14]
 8005536:	6183      	str	r3, [r0, #24]
 8005538:	4619      	mov	r1, r3
 800553a:	2208      	movs	r2, #8
 800553c:	305c      	adds	r0, #92	; 0x5c
 800553e:	f7ff f879 	bl	8004634 <memset>
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <std+0x38>)
 8005544:	6263      	str	r3, [r4, #36]	; 0x24
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <std+0x3c>)
 8005548:	62a3      	str	r3, [r4, #40]	; 0x28
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <std+0x40>)
 800554c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <std+0x44>)
 8005550:	6224      	str	r4, [r4, #32]
 8005552:	6323      	str	r3, [r4, #48]	; 0x30
 8005554:	bd10      	pop	{r4, pc}
 8005556:	bf00      	nop
 8005558:	0800592d 	.word	0x0800592d
 800555c:	0800594f 	.word	0x0800594f
 8005560:	08005987 	.word	0x08005987
 8005564:	080059ab 	.word	0x080059ab

08005568 <_cleanup_r>:
 8005568:	4901      	ldr	r1, [pc, #4]	; (8005570 <_cleanup_r+0x8>)
 800556a:	f000 b8af 	b.w	80056cc <_fwalk_reent>
 800556e:	bf00      	nop
 8005570:	080054a9 	.word	0x080054a9

08005574 <__sfmoreglue>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	2268      	movs	r2, #104	; 0x68
 8005578:	1e4d      	subs	r5, r1, #1
 800557a:	4355      	muls	r5, r2
 800557c:	460e      	mov	r6, r1
 800557e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005582:	f7ff f975 	bl	8004870 <_malloc_r>
 8005586:	4604      	mov	r4, r0
 8005588:	b140      	cbz	r0, 800559c <__sfmoreglue+0x28>
 800558a:	2100      	movs	r1, #0
 800558c:	e9c0 1600 	strd	r1, r6, [r0]
 8005590:	300c      	adds	r0, #12
 8005592:	60a0      	str	r0, [r4, #8]
 8005594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005598:	f7ff f84c 	bl	8004634 <memset>
 800559c:	4620      	mov	r0, r4
 800559e:	bd70      	pop	{r4, r5, r6, pc}

080055a0 <__sfp_lock_acquire>:
 80055a0:	4801      	ldr	r0, [pc, #4]	; (80055a8 <__sfp_lock_acquire+0x8>)
 80055a2:	f000 b8b3 	b.w	800570c <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	2000028d 	.word	0x2000028d

080055ac <__sfp_lock_release>:
 80055ac:	4801      	ldr	r0, [pc, #4]	; (80055b4 <__sfp_lock_release+0x8>)
 80055ae:	f000 b8ae 	b.w	800570e <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	2000028d 	.word	0x2000028d

080055b8 <__sinit_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sinit_lock_acquire+0x8>)
 80055ba:	f000 b8a7 	b.w	800570c <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	2000028e 	.word	0x2000028e

080055c4 <__sinit_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__sinit_lock_release+0x8>)
 80055c6:	f000 b8a2 	b.w	800570e <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	2000028e 	.word	0x2000028e

080055d0 <__sinit>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	f7ff fff0 	bl	80055b8 <__sinit_lock_acquire>
 80055d8:	69a3      	ldr	r3, [r4, #24]
 80055da:	b11b      	cbz	r3, 80055e4 <__sinit+0x14>
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f7ff bff0 	b.w	80055c4 <__sinit_lock_release>
 80055e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055e8:	6523      	str	r3, [r4, #80]	; 0x50
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <__sinit+0x68>)
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <__sinit+0x6c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	bf04      	itt	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	61a3      	streq	r3, [r4, #24]
 80055fa:	4620      	mov	r0, r4
 80055fc:	f000 f820 	bl	8005640 <__sfp>
 8005600:	6060      	str	r0, [r4, #4]
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f81c 	bl	8005640 <__sfp>
 8005608:	60a0      	str	r0, [r4, #8]
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f818 	bl	8005640 <__sfp>
 8005610:	2200      	movs	r2, #0
 8005612:	60e0      	str	r0, [r4, #12]
 8005614:	2104      	movs	r1, #4
 8005616:	6860      	ldr	r0, [r4, #4]
 8005618:	f7ff ff82 	bl	8005520 <std>
 800561c:	68a0      	ldr	r0, [r4, #8]
 800561e:	2201      	movs	r2, #1
 8005620:	2109      	movs	r1, #9
 8005622:	f7ff ff7d 	bl	8005520 <std>
 8005626:	68e0      	ldr	r0, [r4, #12]
 8005628:	2202      	movs	r2, #2
 800562a:	2112      	movs	r1, #18
 800562c:	f7ff ff78 	bl	8005520 <std>
 8005630:	2301      	movs	r3, #1
 8005632:	61a3      	str	r3, [r4, #24]
 8005634:	e7d2      	b.n	80055dc <__sinit+0xc>
 8005636:	bf00      	nop
 8005638:	08005af0 	.word	0x08005af0
 800563c:	08005569 	.word	0x08005569

08005640 <__sfp>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	4607      	mov	r7, r0
 8005644:	f7ff ffac 	bl	80055a0 <__sfp_lock_acquire>
 8005648:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <__sfp+0x84>)
 800564a:	681e      	ldr	r6, [r3, #0]
 800564c:	69b3      	ldr	r3, [r6, #24]
 800564e:	b913      	cbnz	r3, 8005656 <__sfp+0x16>
 8005650:	4630      	mov	r0, r6
 8005652:	f7ff ffbd 	bl	80055d0 <__sinit>
 8005656:	3648      	adds	r6, #72	; 0x48
 8005658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800565c:	3b01      	subs	r3, #1
 800565e:	d503      	bpl.n	8005668 <__sfp+0x28>
 8005660:	6833      	ldr	r3, [r6, #0]
 8005662:	b30b      	cbz	r3, 80056a8 <__sfp+0x68>
 8005664:	6836      	ldr	r6, [r6, #0]
 8005666:	e7f7      	b.n	8005658 <__sfp+0x18>
 8005668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800566c:	b9d5      	cbnz	r5, 80056a4 <__sfp+0x64>
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <__sfp+0x88>)
 8005670:	60e3      	str	r3, [r4, #12]
 8005672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005676:	6665      	str	r5, [r4, #100]	; 0x64
 8005678:	f000 f847 	bl	800570a <__retarget_lock_init_recursive>
 800567c:	f7ff ff96 	bl	80055ac <__sfp_lock_release>
 8005680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005688:	6025      	str	r5, [r4, #0]
 800568a:	61a5      	str	r5, [r4, #24]
 800568c:	2208      	movs	r2, #8
 800568e:	4629      	mov	r1, r5
 8005690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005694:	f7fe ffce 	bl	8004634 <memset>
 8005698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800569c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056a0:	4620      	mov	r0, r4
 80056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a4:	3468      	adds	r4, #104	; 0x68
 80056a6:	e7d9      	b.n	800565c <__sfp+0x1c>
 80056a8:	2104      	movs	r1, #4
 80056aa:	4638      	mov	r0, r7
 80056ac:	f7ff ff62 	bl	8005574 <__sfmoreglue>
 80056b0:	4604      	mov	r4, r0
 80056b2:	6030      	str	r0, [r6, #0]
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d1d5      	bne.n	8005664 <__sfp+0x24>
 80056b8:	f7ff ff78 	bl	80055ac <__sfp_lock_release>
 80056bc:	230c      	movs	r3, #12
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	e7ee      	b.n	80056a0 <__sfp+0x60>
 80056c2:	bf00      	nop
 80056c4:	08005af0 	.word	0x08005af0
 80056c8:	ffff0001 	.word	0xffff0001

080056cc <_fwalk_reent>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	4606      	mov	r6, r0
 80056d2:	4688      	mov	r8, r1
 80056d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056d8:	2700      	movs	r7, #0
 80056da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056de:	f1b9 0901 	subs.w	r9, r9, #1
 80056e2:	d505      	bpl.n	80056f0 <_fwalk_reent+0x24>
 80056e4:	6824      	ldr	r4, [r4, #0]
 80056e6:	2c00      	cmp	r4, #0
 80056e8:	d1f7      	bne.n	80056da <_fwalk_reent+0xe>
 80056ea:	4638      	mov	r0, r7
 80056ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f0:	89ab      	ldrh	r3, [r5, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d907      	bls.n	8005706 <_fwalk_reent+0x3a>
 80056f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056fa:	3301      	adds	r3, #1
 80056fc:	d003      	beq.n	8005706 <_fwalk_reent+0x3a>
 80056fe:	4629      	mov	r1, r5
 8005700:	4630      	mov	r0, r6
 8005702:	47c0      	blx	r8
 8005704:	4307      	orrs	r7, r0
 8005706:	3568      	adds	r5, #104	; 0x68
 8005708:	e7e9      	b.n	80056de <_fwalk_reent+0x12>

0800570a <__retarget_lock_init_recursive>:
 800570a:	4770      	bx	lr

0800570c <__retarget_lock_acquire_recursive>:
 800570c:	4770      	bx	lr

0800570e <__retarget_lock_release_recursive>:
 800570e:	4770      	bx	lr

08005710 <__swhatbuf_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	460e      	mov	r6, r1
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	2900      	cmp	r1, #0
 800571a:	b096      	sub	sp, #88	; 0x58
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	da08      	bge.n	8005734 <__swhatbuf_r+0x24>
 8005722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	061a      	lsls	r2, r3, #24
 800572c:	d410      	bmi.n	8005750 <__swhatbuf_r+0x40>
 800572e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005732:	e00e      	b.n	8005752 <__swhatbuf_r+0x42>
 8005734:	466a      	mov	r2, sp
 8005736:	f000 f95f 	bl	80059f8 <_fstat_r>
 800573a:	2800      	cmp	r0, #0
 800573c:	dbf1      	blt.n	8005722 <__swhatbuf_r+0x12>
 800573e:	9a01      	ldr	r2, [sp, #4]
 8005740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005748:	425a      	negs	r2, r3
 800574a:	415a      	adcs	r2, r3
 800574c:	602a      	str	r2, [r5, #0]
 800574e:	e7ee      	b.n	800572e <__swhatbuf_r+0x1e>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	2000      	movs	r0, #0
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	b016      	add	sp, #88	; 0x58
 8005758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800575c <__smakebuf_r>:
 800575c:	898b      	ldrh	r3, [r1, #12]
 800575e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005760:	079d      	lsls	r5, r3, #30
 8005762:	4606      	mov	r6, r0
 8005764:	460c      	mov	r4, r1
 8005766:	d507      	bpl.n	8005778 <__smakebuf_r+0x1c>
 8005768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	6123      	str	r3, [r4, #16]
 8005770:	2301      	movs	r3, #1
 8005772:	6163      	str	r3, [r4, #20]
 8005774:	b002      	add	sp, #8
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	ab01      	add	r3, sp, #4
 800577a:	466a      	mov	r2, sp
 800577c:	f7ff ffc8 	bl	8005710 <__swhatbuf_r>
 8005780:	9900      	ldr	r1, [sp, #0]
 8005782:	4605      	mov	r5, r0
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff f873 	bl	8004870 <_malloc_r>
 800578a:	b948      	cbnz	r0, 80057a0 <__smakebuf_r+0x44>
 800578c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005790:	059a      	lsls	r2, r3, #22
 8005792:	d4ef      	bmi.n	8005774 <__smakebuf_r+0x18>
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	f043 0302 	orr.w	r3, r3, #2
 800579c:	81a3      	strh	r3, [r4, #12]
 800579e:	e7e3      	b.n	8005768 <__smakebuf_r+0xc>
 80057a0:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <__smakebuf_r+0x7c>)
 80057a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	6020      	str	r0, [r4, #0]
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	81a3      	strh	r3, [r4, #12]
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	6163      	str	r3, [r4, #20]
 80057b2:	9b01      	ldr	r3, [sp, #4]
 80057b4:	6120      	str	r0, [r4, #16]
 80057b6:	b15b      	cbz	r3, 80057d0 <__smakebuf_r+0x74>
 80057b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f92d 	bl	8005a1c <_isatty_r>
 80057c2:	b128      	cbz	r0, 80057d0 <__smakebuf_r+0x74>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	89a0      	ldrh	r0, [r4, #12]
 80057d2:	4305      	orrs	r5, r0
 80057d4:	81a5      	strh	r5, [r4, #12]
 80057d6:	e7cd      	b.n	8005774 <__smakebuf_r+0x18>
 80057d8:	08005569 	.word	0x08005569

080057dc <memcpy>:
 80057dc:	440a      	add	r2, r1
 80057de:	4291      	cmp	r1, r2
 80057e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057e4:	d100      	bne.n	80057e8 <memcpy+0xc>
 80057e6:	4770      	bx	lr
 80057e8:	b510      	push	{r4, lr}
 80057ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f2:	4291      	cmp	r1, r2
 80057f4:	d1f9      	bne.n	80057ea <memcpy+0xe>
 80057f6:	bd10      	pop	{r4, pc}

080057f8 <memmove>:
 80057f8:	4288      	cmp	r0, r1
 80057fa:	b510      	push	{r4, lr}
 80057fc:	eb01 0402 	add.w	r4, r1, r2
 8005800:	d902      	bls.n	8005808 <memmove+0x10>
 8005802:	4284      	cmp	r4, r0
 8005804:	4623      	mov	r3, r4
 8005806:	d807      	bhi.n	8005818 <memmove+0x20>
 8005808:	1e43      	subs	r3, r0, #1
 800580a:	42a1      	cmp	r1, r4
 800580c:	d008      	beq.n	8005820 <memmove+0x28>
 800580e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005816:	e7f8      	b.n	800580a <memmove+0x12>
 8005818:	4402      	add	r2, r0
 800581a:	4601      	mov	r1, r0
 800581c:	428a      	cmp	r2, r1
 800581e:	d100      	bne.n	8005822 <memmove+0x2a>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582a:	e7f7      	b.n	800581c <memmove+0x24>

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__malloc_lock+0x8>)
 800582e:	f7ff bf6d 	b.w	800570c <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	2000028c 	.word	0x2000028c

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__malloc_unlock+0x8>)
 800583a:	f7ff bf68 	b.w	800570e <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	2000028c 	.word	0x2000028c

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4614      	mov	r4, r2
 800584c:	460e      	mov	r6, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff b80b 	b.w	8004870 <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f7fe ff9c 	bl	8004798 <_free_r>
 8005860:	4625      	mov	r5, r4
 8005862:	4628      	mov	r0, r5
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f8fa 	bl	8005a60 <_malloc_usable_size_r>
 800586c:	4284      	cmp	r4, r0
 800586e:	4607      	mov	r7, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005876:	d812      	bhi.n	800589e <_realloc_r+0x5a>
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f7fe fff8 	bl	8004870 <_malloc_r>
 8005880:	4605      	mov	r5, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ed      	beq.n	8005862 <_realloc_r+0x1e>
 8005886:	42bc      	cmp	r4, r7
 8005888:	4622      	mov	r2, r4
 800588a:	4631      	mov	r1, r6
 800588c:	bf28      	it	cs
 800588e:	463a      	movcs	r2, r7
 8005890:	f7ff ffa4 	bl	80057dc <memcpy>
 8005894:	4631      	mov	r1, r6
 8005896:	4640      	mov	r0, r8
 8005898:	f7fe ff7e 	bl	8004798 <_free_r>
 800589c:	e7e1      	b.n	8005862 <_realloc_r+0x1e>
 800589e:	4635      	mov	r5, r6
 80058a0:	e7df      	b.n	8005862 <_realloc_r+0x1e>

080058a2 <_raise_r>:
 80058a2:	291f      	cmp	r1, #31
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	d904      	bls.n	80058b6 <_raise_r+0x14>
 80058ac:	2316      	movs	r3, #22
 80058ae:	6003      	str	r3, [r0, #0]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80058b8:	b112      	cbz	r2, 80058c0 <_raise_r+0x1e>
 80058ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058be:	b94b      	cbnz	r3, 80058d4 <_raise_r+0x32>
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f831 	bl	8005928 <_getpid_r>
 80058c6:	462a      	mov	r2, r5
 80058c8:	4601      	mov	r1, r0
 80058ca:	4620      	mov	r0, r4
 80058cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058d0:	f000 b818 	b.w	8005904 <_kill_r>
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d00a      	beq.n	80058ee <_raise_r+0x4c>
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	d103      	bne.n	80058e4 <_raise_r+0x42>
 80058dc:	2316      	movs	r3, #22
 80058de:	6003      	str	r3, [r0, #0]
 80058e0:	2001      	movs	r0, #1
 80058e2:	e7e7      	b.n	80058b4 <_raise_r+0x12>
 80058e4:	2400      	movs	r4, #0
 80058e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058ea:	4628      	mov	r0, r5
 80058ec:	4798      	blx	r3
 80058ee:	2000      	movs	r0, #0
 80058f0:	e7e0      	b.n	80058b4 <_raise_r+0x12>
	...

080058f4 <raise>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <raise+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f7ff bfd2 	b.w	80058a2 <_raise_r>
 80058fe:	bf00      	nop
 8005900:	2000000c 	.word	0x2000000c

08005904 <_kill_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_kill_r+0x20>)
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	4608      	mov	r0, r1
 800590e:	4611      	mov	r1, r2
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	f7fb f8fd 	bl	8000b10 <_kill>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	d102      	bne.n	8005920 <_kill_r+0x1c>
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	b103      	cbz	r3, 8005920 <_kill_r+0x1c>
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	bd38      	pop	{r3, r4, r5, pc}
 8005922:	bf00      	nop
 8005924:	20000290 	.word	0x20000290

08005928 <_getpid_r>:
 8005928:	f7fb b8ea 	b.w	8000b00 <_getpid>

0800592c <__sread>:
 800592c:	b510      	push	{r4, lr}
 800592e:	460c      	mov	r4, r1
 8005930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005934:	f000 f89c 	bl	8005a70 <_read_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	bfab      	itete	ge
 800593c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800593e:	89a3      	ldrhlt	r3, [r4, #12]
 8005940:	181b      	addge	r3, r3, r0
 8005942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005946:	bfac      	ite	ge
 8005948:	6563      	strge	r3, [r4, #84]	; 0x54
 800594a:	81a3      	strhlt	r3, [r4, #12]
 800594c:	bd10      	pop	{r4, pc}

0800594e <__swrite>:
 800594e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005952:	461f      	mov	r7, r3
 8005954:	898b      	ldrh	r3, [r1, #12]
 8005956:	05db      	lsls	r3, r3, #23
 8005958:	4605      	mov	r5, r0
 800595a:	460c      	mov	r4, r1
 800595c:	4616      	mov	r6, r2
 800595e:	d505      	bpl.n	800596c <__swrite+0x1e>
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	2302      	movs	r3, #2
 8005966:	2200      	movs	r2, #0
 8005968:	f000 f868 	bl	8005a3c <_lseek_r>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	4632      	mov	r2, r6
 800597a:	463b      	mov	r3, r7
 800597c:	4628      	mov	r0, r5
 800597e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005982:	f000 b817 	b.w	80059b4 <_write_r>

08005986 <__sseek>:
 8005986:	b510      	push	{r4, lr}
 8005988:	460c      	mov	r4, r1
 800598a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598e:	f000 f855 	bl	8005a3c <_lseek_r>
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	bf15      	itete	ne
 8005998:	6560      	strne	r0, [r4, #84]	; 0x54
 800599a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800599e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059a2:	81a3      	strheq	r3, [r4, #12]
 80059a4:	bf18      	it	ne
 80059a6:	81a3      	strhne	r3, [r4, #12]
 80059a8:	bd10      	pop	{r4, pc}

080059aa <__sclose>:
 80059aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ae:	f000 b813 	b.w	80059d8 <_close_r>
	...

080059b4 <_write_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	; (80059d4 <_write_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fb f8db 	bl	8000b7e <_write>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_write_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_write_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000290 	.word	0x20000290

080059d8 <_close_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	; (80059f4 <_close_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb f8e7 	bl	8000bb6 <_close>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_close_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_close_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000290 	.word	0x20000290

080059f8 <_fstat_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d07      	ldr	r5, [pc, #28]	; (8005a18 <_fstat_r+0x20>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	f7fb f8e2 	bl	8000bce <_fstat>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d102      	bne.n	8005a14 <_fstat_r+0x1c>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	b103      	cbz	r3, 8005a14 <_fstat_r+0x1c>
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	20000290 	.word	0x20000290

08005a1c <_isatty_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d06      	ldr	r5, [pc, #24]	; (8005a38 <_isatty_r+0x1c>)
 8005a20:	2300      	movs	r3, #0
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fb f8e1 	bl	8000bee <_isatty>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_isatty_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_isatty_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20000290 	.word	0x20000290

08005a3c <_lseek_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d07      	ldr	r5, [pc, #28]	; (8005a5c <_lseek_r+0x20>)
 8005a40:	4604      	mov	r4, r0
 8005a42:	4608      	mov	r0, r1
 8005a44:	4611      	mov	r1, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7fb f8da 	bl	8000c04 <_lseek>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_lseek_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_lseek_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	20000290 	.word	0x20000290

08005a60 <_malloc_usable_size_r>:
 8005a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a64:	1f18      	subs	r0, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bfbc      	itt	lt
 8005a6a:	580b      	ldrlt	r3, [r1, r0]
 8005a6c:	18c0      	addlt	r0, r0, r3
 8005a6e:	4770      	bx	lr

08005a70 <_read_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d07      	ldr	r5, [pc, #28]	; (8005a90 <_read_r+0x20>)
 8005a74:	4604      	mov	r4, r0
 8005a76:	4608      	mov	r0, r1
 8005a78:	4611      	mov	r1, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	602a      	str	r2, [r5, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fb f860 	bl	8000b44 <_read>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_read_r+0x1e>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_read_r+0x1e>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	20000290 	.word	0x20000290

08005a94 <_init>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_fini>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr
